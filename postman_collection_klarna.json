{
	"info": {
		"_postman_id": "13e7a3d8-4891-4f9d-85bb-3138f1408255",
		"name": "Klarna Open Banking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20322675"
	},
	"item": [
		{
			"name": "XS2A API",
			"item": [
				{
					"name": "/xs2a/v1/sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 201) {",
									"    pm.environment.set(\"session_id\", jsonData.data.session_id);",
									"    pm.environment.set(\"session_self\", jsonData.data.self);",
									"    pm.environment.set(\"flow_accounts\", jsonData.data.flows.accounts);",
									"    pm.environment.set(\"flow_account_details\", jsonData.data.flows.account_details);",
									"    pm.environment.set(\"flow_balances\", jsonData.data.flows.balances);",
									"    pm.environment.set(\"flow_insights_refresh\", jsonData.data.flows.insights_refresh);",
									"    pm.environment.set(\"flow_transactions\", jsonData.data.flows.transactions);",
									"    pm.environment.set(\"flow_transfer\", jsonData.data.flows.transfer);",
									"    pm.environment.set(\"selected_account_id\", \"\");",
									"    pm.environment.set(\"selected_account_iban\", \"\");",
									"    pm.environment.set(\"auth_url\", \"\");",
									"    pm.environment.set(\"client_token\", \"\");",
									"    pm.environment.set(\"flow_id\", \"\");",
									"    pm.environment.set(\"flow_self\", \"\");",
									"    pm.environment.set(\"redirect_return_url\", \"\");",
									"    pm.environment.set(\"redirect_return_url_success\", \"\");",
									"    pm.environment.set(\"xs2aform.last_step\", \"\");",
									"    pm.environment.set(\"xs2aform.identifier\", \"\");",
									"    pm.environment.set(\"xs2aform.key\", \"\");",
									"    pm.environment.set(\"xs2aform.ct\", \"\");",
									"    pm.environment.set(\"xs2aform.ek\", \"\");",
									"    pm.environment.set(\"xs2aform.iv\", \"\");",
									"    pm.environment.set(\"xs2aform.redirect_id\", \"\");",
									"    pm.environment.set(\"xs2aform.redirect_url\", \"\");",
									"    pm.environment.set(\"xs2aform.selected_account\", \"\");",
									"    pm.environment.set(\"consent_id\", \"\");",
									"    pm.environment.set(\"consent_token\", \"\");",
									"    pm.environment.set(\"from_date\", \"\");",
									"    pm.environment.set(\"to_date\", \"\");",
									"    pm.environment.set(\"current_date\", \"\");",
									"",
									"    var redirect_return_url_tmp = \"http://localhost/auth\";",
									"    var psu_ip_address_tmp = \"\";",
									"    var psu_user_agent_tmp = \"\";",
									"",
									"    if (pm.request.body.raw) {",
									"        request_json = JSON.parse(pm.request.body.raw);",
									"",
									"        if (request_json.redirect_return_url) {",
									"            redirect_return_url_tmp = request_json.redirect_return_url;",
									"        }",
									"        if (request_json.psu && request_json.psu.ip_address) {",
									"            psu_ip_address_tmp = request_json.psu.ip_address;",
									"        }",
									"        if (request_json.psu && request_json.psu.user_agent) {",
									"            psu_user_agent_tmp = request_json.psu.user_agent;",
									"        }",
									"    }",
									"",
									"    pm.environment.set(\"redirect_return_url\", redirect_return_url_tmp);",
									"    pm.environment.set(\"psu_ip_address\", psu_ip_address_tmp);",
									"    pm.environment.set(\"psu_user_agent\", psu_user_agent_tmp);",
									"}",
									"",
									"// Use riverbank_env_url for account insight unless otherwise defined (=> is useful to define a different url in staging)",
									"if (!pm.environment.get(\"acin_env_url\")) {",
									"    pm.environment.set(\"acin_env_url\", pm.environment.get(\"riverbank_env_url\"));",
									"} else {",
									"    // Fix the url for local testing",
									"    if (pm.environment.get(\"acin_env_url\").startsWith(\"http://localhost\")) {",
									"        pm.environment.set(\"flow_insights_refresh\", pm.environment.get(\"acin_env_url\") + \"/insights/v1/sessions/\" + jsonData.data.session_id + \"/flows/insights-refresh\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language\": \"en\",\n    \n    \"_selected_bank\": {\n        \"bank_code\": \"00000\",\n        \"country_code\": \"DE\"\n    },\n    \n    \"psu\": {\n        \"ip_address\": \"127.0.0.1\",\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36\"\n    },\n    \n\t\"consent_scope\": {\n   \t\t\"accounts\": {},\n\t\t\"account_details\": {},\n\t\t\"balances\": {},\n\t\t\"transactions\": {},\n\t\t\"transfer\": {},\n\t\t\"_insights_refresh\": {},\n\t\t\"lifetime\": 30\n\t},\n    \n    \"_aspsp_access\": \"prefer_psd2\",\n    \"_redirect_return_url\": \"http://localhost/auth\",\n    \n    \"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{riverbank_env_url}}/xs2a/v1/sessions",
							"host": [
								"{{riverbank_env_url}}"
							],
							"path": [
								"xs2a",
								"v1",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/flows/accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 201) {",
									"    var clientToken = XS2A.parseClientToken(jsonData.data.client_token);",
									"    pm.environment.set(\"flow_id\", jsonData.data.flow_id);",
									"    pm.environment.set(\"flow_self\", jsonData.data.self);",
									"    pm.environment.set(\"client_token\", jsonData.data.client_token);",
									"    pm.environment.set(\"auth_url\", clientToken.auth_url);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{flow_accounts}}",
							"host": [
								"{{flow_accounts}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/flows/account-details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 201) {",
									"    var clientToken = XS2A.parseClientToken(jsonData.data.client_token);",
									"    pm.environment.set(\"flow_id\", jsonData.data.flow_id);",
									"    pm.environment.set(\"flow_self\", jsonData.data.self);",
									"    pm.environment.set(\"client_token\", jsonData.data.client_token);",
									"    pm.environment.set(\"auth_url\", clientToken.auth_url);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"account_id\": \"{{selected_account_id}}\",\n\t\"iban\": \"{{selected_account_iban}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{flow_account_details}}",
							"host": [
								"{{flow_account_details}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/flows/balances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 201) {",
									"    var clientToken = XS2A.parseClientToken(jsonData.data.client_token);",
									"    pm.environment.set(\"flow_id\", jsonData.data.flow_id);",
									"    pm.environment.set(\"flow_self\", jsonData.data.self);",
									"    pm.environment.set(\"client_token\", jsonData.data.client_token);",
									"    pm.environment.set(\"auth_url\", clientToken.auth_url);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_id\": \"{{selected_account_id}}\",\n\t\"iban\": \"{{selected_account_iban}}\",\n\n    \"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{flow_balances}}",
							"host": [
								"{{flow_balances}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/flows/transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 201) {",
									"    var clientToken = XS2A.parseClientToken(jsonData.data.client_token);",
									"    pm.environment.set(\"flow_id\", jsonData.data.flow_id);",
									"    pm.environment.set(\"flow_self\", jsonData.data.self);",
									"    pm.environment.set(\"client_token\", jsonData.data.client_token);",
									"    pm.environment.set(\"auth_url\", clientToken.auth_url);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var transactionHistoryDays = 30;",
									"",
									"var to = new Date();",
									"pm.environment.set(\"to_date\", to.toISOString().slice(0, 10));",
									"var from = new Date();",
									"from.setDate(from.getDate() - transactionHistoryDays);",
									"pm.environment.set(\"from_date\", from.toISOString().slice(0, 10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"account_id\": \"{{selected_account_id}}\",\n\t\"iban\": \"{{selected_account_iban}}\",\n\t\n\t\"from_date\": \"{{from_date}}\",\n\t\"to_date\": \"{{to_date}}\",\n\n    \"_preferred_pagination_size\": \"{{page_size}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{flow_transactions}}",
							"host": [
								"{{flow_transactions}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/insights/v1/flows/insights-refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 201) {",
									"    var clientToken = XS2A.parseClientToken(jsonData.data.client_token);",
									"    pm.environment.set(\"flow_id\", jsonData.data.flow_id);",
									"    pm.environment.set(\"flow_self\", jsonData.data.self);",
									"    pm.environment.set(\"client_token\", jsonData.data.client_token);",
									"    pm.environment.set(\"auth_url\", clientToken.auth_url);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"flow_insights_refresh\") || pm.environment.get(\"flow_insights_refresh\") === '') {\r",
									"    throw new Error(\"To use the insights-refresh please define consent_scope.insights_refresh in the session start body\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"store_consent\": \"OPTIONAL\"\r\n}"
						},
						"url": {
							"raw": "{{flow_insights_refresh}}",
							"host": [
								"{{flow_insights_refresh}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/flows/transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 201) {",
									"    var clientToken = XS2A.parseClientToken(jsonData.data.client_token);",
									"    pm.environment.set(\"flow_id\", jsonData.data.flow_id);",
									"    pm.environment.set(\"flow_self\", jsonData.data.self);",
									"    pm.environment.set(\"client_token\", jsonData.data.client_token);",
									"    pm.environment.set(\"auth_url\", clientToken.auth_url);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"current_date\", new Date().toISOString().slice(0, 10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"account_id\": \"{{selected_account_id}}\",\n\t\"iban\": \"{{selected_account_iban}}\",\n\t\n    \"amount\": {\n        \"amount\": \"230\",\n        \"currency\": \"EUR\"\n    },\n    \n    \"preferred_date\": \"{{current_date}}\",\n    \n    \"reference\": \"Coffee\",\n    \n    \"to\": {\n        \"iban\": \"DE28000000008746441159\",\n        \"bic\": \"TESTDE10XXX\",\n        \"holder_name\": \"Max Mustermann\",\n        \"holder_address\": {\n        \t\"street_address\": \"Konrad-Adenauer-Straße 21\",\n        \t\"postalcode\": \"35440\",\n            \"city\": \"Linden\",\n            \"country\": \"DE\"\n        }\n    },\n    \n    \"transfer_method\": \"sct\",\n    \n    \"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{flow_transfer}}",
							"host": [
								"{{flow_transfer}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/flows/ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200) {",
									"    // accounts",
									"    if (jsonData.data.result.accounts && jsonData.data.result.accounts[0]) {",
									"        pm.environment.set(\"selected_account_id\", jsonData.data.result.accounts[0].id);",
									"        pm.environment.set(\"selected_account_iban\", jsonData.data.result.accounts[0].iban);",
									"    }",
									"    ",
									"    // flow_insights_refresh",
									"    if (jsonData.data.result.insights_consumer_id) {",
									"        pm.environment.set(\"insights_consumer_id\", jsonData.data.result.insights_consumer_id);",
									"        if (jsonData.data.result.accounts && jsonData.data.result.accounts.length > 0) {",
									"            pm.environment.set(\"insights_account_id\", jsonData.data.result.accounts[0].insights_account_id);",
									"        }",
									"        ",
									"        if (jsonData.data.result.store_consent_result === 'STORED') {",
									"            pm.environment.unset(\"consent_id\");",
									"            pm.environment.unset(\"consent_token\");",
									"            pm.environment.set(\"consent_id_nullable\", null);",
									"            pm.environment.set(\"consent_token_nullable\", null);",
									"        }",
									"    }",
									"   ",
									"    // account_details, balance",
									"    if (jsonData.data.result.account) {",
									"        pm.environment.set(\"selected_account_id\", jsonData.data.result.account.id);",
									"        pm.environment.set(\"selected_account_iban\", jsonData.data.result.account.iban);",
									"    }",
									"",
									"    // transfer",
									"    if (jsonData.data.result.from) {",
									"        pm.environment.set(\"selected_account_id\", jsonData.data.result.from.id);",
									"        pm.environment.set(\"selected_account_iban\", jsonData.data.result.from.iban);",
									"    }",
									"",
									"    if (jsonData.data.result.transfer_token) {",
									"        pm.environment.set(\"transfer_token\", jsonData.data.result.transfer_token);",
									"        pm.environment.set(\"transfer_id\", jsonData.data.result.transfer_id);",
									"    }",
									"    // transactions",
									"    if (jsonData.data.result.pagination) {",
									"        pm.environment.set(\"flow_transactions_next_url\", jsonData.data.result.pagination.url);",
									"        if(jsonData.data.result.pagination.next) {",
									"            pm.environment.set(\"pagination_offset\", jsonData.data.result.pagination.next.offset);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{flow_self}}",
							"host": [
								"{{flow_self}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/flows/ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{flow_self}}",
							"host": [
								"{{flow_self}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/sessions/ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{session_self}}",
							"host": [
								"{{session_self}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/sessions/ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{session_self}}",
							"host": [
								"{{session_self}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "xs2a/v1/sessions/sessionID/flows/flowID/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200) {",
									"    // transactions",
									"    if (jsonData.data.result.pagination) {",
									"        pm.environment.set(\"flow_transactions_next_url\", jsonData.data.result.pagination.url);",
									"        if(jsonData.data.result.pagination.next) {",
									"            pm.environment.set(\"pagination_offset\", jsonData.data.result.pagination.next.offset);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"offset\": \"{{pagination_offset}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{flow_transactions_next_url}}",
							"host": [
								"{{flow_transactions_next_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "XS2A Consent API",
			"item": [
				{
					"name": "Insights consent refresh",
					"item": [
						{
							"name": "/insights/v1/consents/insights-refresh",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if (pm.response.code < 300) {",
											"    pm.environment.set(\"acin_consent_refresh_flow_self\", jsonData.data.self);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"consent_id\": {{consent_id_nullable}},\n\t\"consent_token\": {{consent_token_nullable}},\n\t\"insights_consumer_id\": \"{{insights_consumer_id}}\",\n\t\"refresh_days\": 89,\n\t\"accounts\": {\n        \"type\": \"REFRESH_KNOWN_ACCOUNTS\"\n\t}\n}"
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/consents/insights-refresh",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"consents",
										"insights-refresh"
									]
								}
							},
							"response": []
						},
						{
							"name": "/insights/v1/consents/insights-refresh/ID/get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if (pm.response.code == 200 && jsonData.data.consent_token) {",
											"    pm.environment.set(\"consent_token\", jsonData.data.consent_token);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_consent_refresh_flow_self}}",
									"host": [
										"{{acin_consent_refresh_flow_self}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/xs2a/v1/sessions/ID/consent/get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200) {",
									"    pm.environment.set(\"consent_id\", jsonData.data.consent_id);",
									"    pm.environment.set(\"consent_token\", jsonData.data.consent_token);",
									"    ",
									"    // for insights the consent_id can be null. To send it correctly in postman it needs to be either null or wrapped with \"",
									"    pm.environment.set(\"consent_id_nullable\", '\"' + jsonData.data.consent_id + '\"');",
									"    pm.environment.set(\"consent_token_nullable\", '\"' + jsonData.data.consent_token + '\"');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{session_self}}/consent/get",
							"host": [
								"{{session_self}}"
							],
							"path": [
								"consent",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/consents/ID/accounts/get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200) {",
									"    pm.environment.set(\"consent_token\", jsonData.data.consent_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"consent_token\": \"{{consent_token}}\",\n\n    \"psu\": {\n        \"ip_address\": \"{{psu_ip_address}}\",\n        \"user_agent\": \"{{psu_user_agent}}\"\n    },\n    \n    \"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{riverbank_env_url}}/xs2a/v1/consents/{{consent_id}}/accounts/get",
							"host": [
								"{{riverbank_env_url}}"
							],
							"path": [
								"xs2a",
								"v1",
								"consents",
								"{{consent_id}}",
								"accounts",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/consents/ID/account-details/get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200) {",
									"    pm.environment.set(\"consent_token\", jsonData.data.consent_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"consent_token\": \"{{consent_token}}\",\n\t\"account_id\": \"{{selected_account_id}}\",\n\t\n    \"psu\": {\n        \"ip_address\": \"{{psu_ip_address}}\",\n        \"user_agent\": \"{{psu_user_agent}}\"\n    },\n    \n    \"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{riverbank_env_url}}/xs2a/v1/consents/{{consent_id}}/account-details/get",
							"host": [
								"{{riverbank_env_url}}"
							],
							"path": [
								"xs2a",
								"v1",
								"consents",
								"{{consent_id}}",
								"account-details",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/consents/ID/balances/get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200) {",
									"    pm.environment.set(\"consent_token\", jsonData.data.consent_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"consent_token\": \"{{consent_token}}\",\n\t\"account_id\": \"{{selected_account_id}}\",\n\t\n    \"psu\": {\n        \"ip_address\": \"{{psu_ip_address}}\",\n        \"user_agent\": \"{{psu_user_agent}}\"\n    },\n    \n    \"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{riverbank_env_url}}/xs2a/v1/consents/{{consent_id}}/balances/get",
							"host": [
								"{{riverbank_env_url}}"
							],
							"path": [
								"xs2a",
								"v1",
								"consents",
								"{{consent_id}}",
								"balances",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/consents/ID/transactions/get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200) {",
									"    pm.environment.set(\"consent_token\", jsonData.data.consent_token);",
									"    if(jsonData.data.result.pagination) {",
									"        pm.environment.set(\"consent_transactions_next_url\", jsonData.data.result.pagination.url);",
									"        if(jsonData.data.result.pagination.next) {",
									"            pm.environment.set(\"pagination_offset\", jsonData.data.result.pagination.next.offset);",
									"        }       ",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var transactionHistoryDays = 30;",
									"",
									"var to = new Date();",
									"pm.environment.set(\"to_date\", to.toISOString().slice(0, 10));",
									"var from = new Date();",
									"from.setDate(from.getDate() - transactionHistoryDays);",
									"pm.environment.set(\"from_date\", from.toISOString().slice(0, 10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"consent_token\": \"{{consent_token}}\",\n\t\"account_id\": \"{{selected_account_id}}\",\n\t\n\t\"from_date\": \"{{from_date}}\",\n\t\"to_date\": \"{{to_date}}\",\n\n    \"_preferred_pagination_size\": {{page_size}},\n\t\n    \"psu\": {\n        \"ip_address\": \"{{psu_ip_address}}\",\n        \"user_agent\": \"{{psu_user_agent}}\"\n    },\n    \n    \"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{riverbank_env_url}}/xs2a/v1/consents/{{consent_id}}/transactions/get",
							"host": [
								"{{riverbank_env_url}}"
							],
							"path": [
								"xs2a",
								"v1",
								"consents",
								"{{consent_id}}",
								"transactions",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/consents/ID/transfers/TRANSFER-ID/state/get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200) {",
									"    pm.environment.set(\"consent_token\", jsonData.data.consent_token);",
									"",
									"    if (jsonData.data.result.transfer_token) {",
									"        pm.environment.set(\"transfer_token\", jsonData.data.result.transfer_token);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"consent_token\": \"{{consent_token}}\",\n\t\"transfer_token\": \"{{transfer_token}}\",\n\t\n    \"psu\": {\n        \"ip_address\": \"{{psu_ip_address}}\",\n        \"user_agent\": \"{{psu_user_agent}}\"\n    },\n    \n    \"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{riverbank_env_url}}/xs2a/v1/consents/{{consent_id}}/transfers/{{transfer_id}}/state/get",
							"host": [
								"{{riverbank_env_url}}"
							],
							"path": [
								"xs2a",
								"v1",
								"consents",
								"{{consent_id}}",
								"transfers",
								"{{transfer_id}}",
								"state",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "/xs2a/v1/consents/ID/transactions/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200) {",
									"    // transactions",
									"    if (jsonData.data.result.pagination) {",
									"        pm.environment.set(\"consent_transactions_next_url\", jsonData.data.result.pagination.url);",
									"        if(jsonData.data.result.pagination.next) {",
									"            pm.environment.set(\"pagination_offset\", jsonData.data.result.pagination.next.offset);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"offset\" : \"{{pagination_offset}}\",\n\t\"consent_token\": \"{{consent_token}}\",\n\n    \"psu\": {\n        \"ip_address\": \"{{psu_ip_address}}\",\n        \"user_agent\": \"{{psu_user_agent}}\"\n    },\n    \n    \"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{consent_transactions_next_url}}",
							"host": [
								"{{consent_transactions_next_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Insights API",
			"item": [
				{
					"name": "Auto refresh",
					"item": [
						{
							"name": "Schedule automatic refresh",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n\t\"insights_consumer_id\": \"{{insights_consumer_id}}\",\r\n    \"refresh_interval_minutes\": 480,\r\n    \"data_retention_minutes\": 1440\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/autorefresh/schedule",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"autorefresh",
										"schedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get automatic refresh status",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n\t\"insights_consumer_id\": \"{{insights_consumer_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/autorefresh/list",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"autorefresh",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete automatic refresh",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n\t\"insights_consumer_id\": \"{{insights_consumer_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/autorefresh/delete",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"autorefresh",
										"delete"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Storage",
					"item": [
						{
							"name": "Delete",
							"item": [
								{
									"name": "/insights/v1/storage/consumers/delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \n\t\"insights_consumer_id\": \"{{insights_consumer_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{acin_env_url}}/insights/v1/storage/consumers/delete",
											"host": [
												"{{acin_env_url}}"
											],
											"path": [
												"insights",
												"v1",
												"storage",
												"consumers",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "/insights/v1/storage/accounts/delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"insights_account_ids\": [\n        \"{{insights_account_id}}\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{acin_env_url}}/insights/v1/storage/accounts/delete",
											"host": [
												"{{acin_env_url}}"
											],
											"path": [
												"insights",
												"v1",
												"storage",
												"accounts",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "/insights/v1/storage/transactions/delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"insights_account_id\": \"{{insights_account_id}}\",\n    \"insights_transaction_ids\": [\n        \"this_is_a_test_transaction_id\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{acin_env_url}}/insights/v1/storage/transactions/delete",
											"host": [
												"{{acin_env_url}}"
											],
											"path": [
												"insights",
												"v1",
												"storage",
												"transactions",
												"delete"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create",
							"item": [
								{
									"name": "/insights/v1/storage/accounts/create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"if (pm.response.code == 200) {  ",
													"    if (jsonData.data.insights_consumer_id) {",
													"        pm.environment.set(\"insights_consumer_id\", jsonData.data.insights_consumer_id);",
													"    }",
													"    if (jsonData.data.insights_account_id) {",
													"        pm.environment.set(\"insights_account_id\", jsonData.data.insights_account_id);",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"account\": {\n        \"alias\": \"My saving account\",\n        \"holder_name\": \"Homer Simpson\",\n        \"account_type\": \"SAVING\",\n        \"currency\": \"EUR\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{acin_env_url}}/insights/v1/storage/accounts/create",
											"host": [
												"{{acin_env_url}}"
											],
											"path": [
												"insights",
												"v1",
												"storage",
												"accounts",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "/insights/v1/storage/transactions/create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let tmpDate = new Date();",
													"tmpDate.setDate(tmpDate.getDate()-1);",
													"pm.environment.set(\"insights_bankdata_date_7\", tmpDate.toISOString().split('T')[0]);",
													"",
													"tmpDate = new Date();",
													"tmpDate.setDate(tmpDate.getDate()-4);",
													"pm.environment.set(\"insights_bankdata_date_6\", tmpDate.toISOString().split('T')[0]);",
													"",
													"tmpDate = new Date();",
													"tmpDate.setDate(tmpDate.getDate()-8);",
													"pm.environment.set(\"insights_bankdata_date_5\", tmpDate.toISOString().split('T')[0]);",
													"",
													"tmpDate = new Date();",
													"tmpDate.setDate(tmpDate.getDate()-12);",
													"pm.environment.set(\"insights_bankdata_date_4\", tmpDate.toISOString().split('T')[0]);",
													"",
													"tmpDate = new Date();",
													"tmpDate.setDate(tmpDate.getDate()-15);",
													"pm.environment.set(\"insights_bankdata_date_3\", tmpDate.toISOString().split('T')[0]);",
													"",
													"tmpDate = new Date();",
													"tmpDate.setDate(tmpDate.getDate()-16);",
													"pm.environment.set(\"insights_bankdata_date_2\", tmpDate.toISOString().split('T')[0]);",
													"",
													"tmpDate = new Date();",
													"tmpDate.setDate(tmpDate.getDate()-24);",
													"pm.environment.set(\"insights_bankdata_date_1\", tmpDate.toISOString().split('T')[0]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"insights_account_id\": \"{{insights_account_id}}\",\n    \"transactions\": [\n        {\n            \"insights_transaction_id\": \"this_is_a_test_transaction_id\",\n            \"booking_date\": \"{{insights_bankdata_date_1}}\",\n            \"reference\": \"xa0h0d0svlsyw0bap0boahuqxb HM online de, ref. 13676134\",\n            \"counter_party\": {\n                \"holder_name\": \"Klarna Bank AB\"\n            },\n            \"amount\": {\n                \"amount\": 3895,\n                \"currency\": \"EUR\"\n            },\n            \"type\": \"DEBIT\",\n            \"labels\": {\n                \"key1\": \"a value\",\n                \"key2\": \"another value\"\n            }\n        },\n        {\n            \"insights_transaction_id\": \"this_is_a_test_transaction_id2\",\n            \"booking_date\": \"{{insights_bankdata_date_2}}\",\n            \"reference\": \"elv138314 12.08 16:38 me0\",\n            \"counter_party\": {\n                \"holder_name\": \"Ikea Berlin\"\n            },\n            \"amount\": {\n                \"amount\": 53478,\n                \"currency\": \"EUR\"\n            },\n            \"type\": \"DEBIT\"\n        },\n        {\n            \"booking_date\": \"{{insights_bankdata_date_3}}\",\n            \"reference\": \"371-386891-43879 amzn mktp de\",\n            \"counter_party\": {\n                \"holder_name\": \"Amazon Payments Europe S.C.A.\"\n            },\n            \"amount\": {\n                \"amount\": 4999,\n                \"currency\": \"EUR\"\n            },\n            \"type\": \"DEBIT\"\n        },\n        {\n            \"booking_date\": \"{{insights_bankdata_date_4}}\",\n            \"reference\": \"Spotify p41ff6bfd9\",\n            \"counter_party\": {\n                \"holder_name\": \"Spotify\"\n            },\n            \"amount\": {\n                \"amount\": 1299,\n                \"currency\": \"EUR\"\n            },\n            \"type\": \"DEBIT\"\n        },\n        {\n            \"booking_date\": \"{{insights_bankdata_date_5}}\",\n            \"reference\": \"Debit Card Payment - Aldi SE + co. kg//Oberhausen/DE 20-08-2020t19:57:13\",\n            \"counter_party\": {\n                \"holder_name\": \"\"\n            },\n            \"amount\": {\n                \"amount\": 6793,\n                \"currency\": \"EUR\"\n            },\n            \"type\": \"DEBIT\"\n        },\n        {\n            \"booking_date\": \"{{insights_bankdata_date_6}}\",\n            \"reference\": \"Salary\",\n            \"counter_party\": {\n                \"holder_name\": \"Small Company\"\n            },\n            \"amount\": {\n                \"amount\": 300000,\n                \"currency\": \"EUR\"\n            },\n            \"type\": \"CREDIT\"\n        },\n        {\n            \"booking_date\": \"{{insights_bankdata_date_7}}\",\n            \"reference\": \"Transfer\",\n            \"state\": \"PENDING\",\n            \"amount\": {\n                \"amount\": 15000,\n                \"currency\": \"EUR\"\n            },\n            \"type\": \"DEBIT\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{acin_env_url}}/insights/v1/storage/transactions/create",
											"host": [
												"{{acin_env_url}}"
											],
											"path": [
												"insights",
												"v1",
												"storage",
												"transactions",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "/insights/v1/storage/transactions/update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"insights_account_id\": \"{{insights_account_id}}\",\n    \"transactions\": [\n        {\n            \"insights_transaction_id\": \"this_is_a_test_transaction_id\",\n            \"reference\": \"xa0h0d0svlsyw0bap0boahuqxb HM online de, ref. 13676134 UPDATED\",\n            \"counter_party\": {\n                \"holder_name\": \"Klarna Bank AB UPDATED\"\n            },\n            \"amount\": {\n                \"amount\": 38950,\n                \"currency\": \"EUR\"\n            },\n            \"type\": \"DEBIT\"\n        },\n        {\n            \"insights_transaction_id\": \"this_is_a_test_transaction_id2\",\n            \"state\": \"PENDING\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{acin_env_url}}/insights/v1/storage/transactions/update",
											"host": [
												"{{acin_env_url}}"
											],
											"path": [
												"insights",
												"v1",
												"storage",
												"transactions",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "/insights/v1/storage/transactions/replace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"insights_account_id\": \"{{insights_account_id}}\",\n    \"transactions\": [\n        {\n            \"insights_transaction_id\": \"this_is_a_test_transaction_id2\",\n            \"reference\": \"this is a replaced reference\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{acin_env_url}}/insights/v1/storage/transactions/replace",
											"host": [
												"{{acin_env_url}}"
											],
											"path": [
												"insights",
												"v1",
												"storage",
												"transactions",
												"replace"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List",
							"item": [
								{
									"name": "/insights/v1/storage/accounts/list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"pagination\": {\n        \"size\": 5,\n        \"offset\": 0\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{acin_env_url}}/insights/v1/storage/accounts/list",
											"host": [
												"{{acin_env_url}}"
											],
											"path": [
												"insights",
												"v1",
												"storage",
												"accounts",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "/insights/v1/storage/transactions/list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"pagination\": {\n        \"size\": 5,\n        \"offset\": 0\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{acin_env_url}}/insights/v1/storage/transactions/list",
											"host": [
												"{{acin_env_url}}"
											],
											"path": [
												"insights",
												"v1",
												"storage",
												"transactions",
												"list"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Reports",
					"item": [
						{
							"name": "/insights/v1/reports/account-info/create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"insights_account_ids\": [\n        \"{{insights_account_id}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/reports/account-info/create",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"reports",
										"account-info",
										"create"
									]
								},
								"description": "get the Account-Info report"
							},
							"response": []
						},
						{
							"name": "/insights/v1/reports/balances/create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"insights_account_ids\": [\n        \"{{insights_account_id}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/reports/balances/create",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"reports",
										"balances",
										"create"
									]
								},
								"description": "get the current balance from an account"
							},
							"response": []
						},
						{
							"name": "/insights/v1/reports/balance-over-time/create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"report_days\": 30,\n    \"insights_account_ids\": [\n        \"{{insights_account_id}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/reports/balance-over-time/create",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"reports",
										"balance-over-time",
										"create"
									]
								},
								"description": "get the Balance-over-time report (shows the trends of a the balance per day)"
							},
							"response": []
						},
						{
							"name": "/insights/v1/reports/categorization/create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"report_days\": 30,\n    \"insights_account_ids\": [\n        \"{{insights_account_id}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/reports/categorization/create",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"reports",
										"categorization",
										"create"
									]
								},
								"description": "get the Categorized Transaction report"
							},
							"response": []
						},
						{
							"name": "/insights/v1/reports/expense-category/create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"report_days\": 30,\n    \"insights_account_ids\": [\n        \"{{insights_account_id}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/reports/expense-category/create",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"reports",
										"expense-category",
										"create"
									]
								},
								"description": "get the Expense Categories report"
							},
							"response": []
						},
						{
							"name": "/insights/v1/reports/recurring-transactions/create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"report_days\": 30,\n    \"insights_account_ids\": [\n        \"{{insights_account_id}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/reports/recurring-transactions/create",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"reports",
										"recurring-transactions",
										"create"
									]
								},
								"description": "get the recurring-transactions report"
							},
							"response": []
						},
						{
							"name": "/insights/v1/reports/bulk/create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reports\": [\n        {\n            \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n            \"type\": \"ACCOUNT_INFOS\"\n        },\n        {\n            \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n            \"type\": \"BALANCES\"\n        },\n        {\n            \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n            \"type\": \"BALANCE_OVER_TIME\",\n            \"report_days\": 30,\n            \"insights_account_ids\": [\n                \"{{insights_account_id}}\"\n            ]\n        },\n        {\n            \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n            \"type\": \"CATEGORIZED_TRANSACTIONS\",\n            \"report_days\": 30,\n            \"insights_account_ids\": [\n                \"{{insights_account_id}}\"\n            ]\n        },\n        {\n            \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n            \"type\": \"EXPENSE_CATEGORIES\",\n            \"report_days\": 30,\n            \"insights_account_ids\": [\n                \"{{insights_account_id}}\"\n            ]\n        },\n        {\n            \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n            \"type\": \"RECURRING_TRANSACTIONS\",\n            \"report_days\": 30,\n            \"insights_account_ids\": [\n                \"{{insights_account_id}}\"\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/reports/bulk/create",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"reports",
										"bulk",
										"create"
									]
								},
								"description": "request all the possible reports in one go"
							},
							"response": []
						}
					]
				},
				{
					"name": "Labels",
					"item": [
						{
							"name": "Upsert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"insights_account_id\": \"{{insights_account_id}}\",\n    \"insights_transaction_ids\": [\n        \"this_is_a_test_transaction_id\"\n    ],\n    \"labels\": {\n        \"key1\": \"a changed value\",\n        \"key3\": \"a new value\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/storage/transactions/labels/upsert",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"storage",
										"transactions",
										"labels",
										"upsert"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete specific",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"insights_account_id\": \"{{insights_account_id}}\",\n    \"insights_transaction_ids\": [\n        \"this_is_a_test_transaction_id\"\n    ],\n    \"label_keys\": [\n        \"key1\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/storage/transactions/labels/delete",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"storage",
										"transactions",
										"labels",
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"insights_consumer_id\": \"{{insights_consumer_id}}\",\n    \"insights_account_id\": \"{{insights_account_id}}\",\n    \"insights_transaction_ids\": [\n        \"this_is_a_test_transaction_id\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acin_env_url}}/insights/v1/storage/transactions/labels/deleteall",
									"host": [
										"{{acin_env_url}}"
									],
									"path": [
										"insights",
										"v1",
										"storage",
										"transactions",
										"labels",
										"deleteall"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/insights/v1/categories/get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"insights_consumer_id\": \"{{insights_consumer_id}}\",\n\t\"report_days\": 62,\n\t\"reports\": [\n\t\t{\n\t\t\t\"type\": \"CATEGORIZED_TRANSACTIONS\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"BALANCE_OVER_TIME\"\n\t\t},\t\t\n\t\t{\n\t\t\t\"type\": \"EXPENSE_CATEGORIES\",\n\t\t\t\"options\": {\n\t\t\t\t\"only_main_category\": true\n\t\t\t}\n\t\t}\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{acin_env_url}}/insights/v1/categories/get",
							"host": [
								"{{acin_env_url}}"
							],
							"path": [
								"insights",
								"v1",
								"categories",
								"get"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth API - PSD2-testbank (white label only)",
			"item": [
				{
					"name": "/wizard/v1/ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "{{origin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/PSD2-testbank/select-testbank",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").startsWith(\"bank_search:\")) {",
									"    throw new Error(\"Bank selection form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"bank_code\":\"00000\",\n\t\"country_code\":\"DE\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/PSD2-testbank/select-transport-psd2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":transport_selection\")) {",
									"    throw new Error(\"Transport selection form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var xs2aform_key = pm.environment.get(\"xs2aform.key\");",
									"",
									"if (xs2aform_key) {",
									"    var form = {",
									"        \"form_identifier\":pm.environment.get(\"xs2aform.identifier\"),",
									"        \"data\":[",
									"            { \"key\": \"interface\", \"value\": \"de_testbank_bias\" }",
									"        ]",
									"    };",
									"    ",
									"    var encrypted = XS2A.encryptForm(form, pm.environment.get(\"xs2aform.key\"));",
									"    pm.environment.set(\"xs2aform.ct\", encrypted.ct);",
									"    pm.environment.set(\"xs2aform.iv\", encrypted.iv);",
									"    pm.environment.set(\"xs2aform.ek\", encrypted.ek);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ek\":\"{{xs2aform.ek}}\",\n\t\"iv\":\"{{xs2aform.iv}}\",\n\t\"ct\":\"{{xs2aform.ct}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/PSD2-testbank/select-first-account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":account_selection\")) {",
									"    throw new Error(\"Account selection form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var form = {",
									"    \"form_identifier\":pm.environment.get(\"xs2aform.identifier\"),",
									"    \"data\": [",
									"        { \"key\": \"account_id\", \"value\": pm.environment.get(\"xs2aform.selected_account\")}",
									"    ]",
									"};",
									"",
									"var encrypted = XS2A.encryptForm(form, pm.environment.get(\"xs2aform.key\"));",
									"pm.environment.set(\"xs2aform.ct\", encrypted.ct);",
									"pm.environment.set(\"xs2aform.iv\", encrypted.iv);",
									"pm.environment.set(\"xs2aform.ek\", encrypted.ek);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{origin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ek\":\"{{xs2aform.ek}}\",\n\t\"iv\":\"{{xs2aform.iv}}\",\n\t\"ct\":\"{{xs2aform.ct}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/PSD2-testbank/redirect/login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":authentication\")) {",
									"    throw new Error(\"Authentication form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var form = {",
									"    \"form_identifier\":pm.environment.get(\"xs2aform.identifier\"),",
									"    \"data\": [",
									"        { \"key\": \"bias.apis.forms.elements.UsernameElement\", \"value\": \"redirect\" },",
									"        { \"key\": \"bias.apis.forms.elements.PasswordElement\", \"value\": \"123456\" },",
									"    ]",
									"};",
									"",
									"var encrypted = XS2A.encryptForm(form, pm.environment.get(\"xs2aform.key\"));",
									"pm.environment.set(\"xs2aform.ct\", encrypted.ct);",
									"pm.environment.set(\"xs2aform.iv\", encrypted.iv);",
									"pm.environment.set(\"xs2aform.ek\", encrypted.ek);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{origin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ek\":\"{{xs2aform.ek}}\",\n\t\"iv\":\"{{xs2aform.iv}}\",\n\t\"ct\":\"{{xs2aform.ct}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/PSD2-testbank/redirect/otp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":authorization\")) {",
									"    throw new Error(\"Authorization form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var form = {",
									"    \"form_identifier\":pm.environment.get(\"xs2aform.identifier\"),",
									"    \"data\": [",
									"        { \"key\": \"bias.apis.forms.elements.OtpElement\", \"value\": \"redirect\" }",
									"    ]",
									"};",
									"",
									"var encrypted = XS2A.encryptForm(form, pm.environment.get(\"xs2aform.key\"));",
									"pm.environment.set(\"xs2aform.ct\", encrypted.ct);",
									"pm.environment.set(\"xs2aform.iv\", encrypted.iv);",
									"pm.environment.set(\"xs2aform.ek\", encrypted.ek);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{origin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ek\":\"{{xs2aform.ek}}\",\n\t\"iv\":\"{{xs2aform.iv}}\",\n\t\"ct\":\"{{xs2aform.ct}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID-PSD2-testbank/redirect/complete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").startsWith(\"redirect:\")) {",
									"    throw new Error(\"Redirect form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var url = pm.environment.get(\"redirect_return_url\");",
									"",
									"if (url && url.trim().length > 0) {",
									"    if (url.includes(\"?\")) {",
									"        pm.environment.set(\"redirect_return_url_success\", url += \"&result=success\");",
									"    } else {",
									"        pm.environment.set(\"redirect_return_url_success\", url += \"?result=success\");",
									"    }",
									"} else {",
									"    pm.environment.set(\"redirect_return_url_success\", \"http://localhost/auth?result=success\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{origin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"redirect_id\": \"{{xs2aform.redirect_id}}\",\n    \"return_url\": \"{{redirect_return_url_success}}\",\n    \n    \"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/PSD2-testbank/decoupled/login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":authentication\")) {",
									"    throw new Error(\"Authentication form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var form = {",
									"    \"form_identifier\":pm.environment.get(\"xs2aform.identifier\"),",
									"    \"data\": [",
									"        { \"key\": \"bias.apis.forms.elements.UsernameElement\", \"value\": \"decoupled\" },",
									"        { \"key\": \"bias.apis.forms.elements.PasswordElement\", \"value\": \"123456\" },",
									"    ]",
									"};",
									"",
									"var encrypted = XS2A.encryptForm(form, pm.environment.get(\"xs2aform.key\"));",
									"pm.environment.set(\"xs2aform.ct\", encrypted.ct);",
									"pm.environment.set(\"xs2aform.iv\", encrypted.iv);",
									"pm.environment.set(\"xs2aform.ek\", encrypted.ek);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{origin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ek\":\"{{xs2aform.ek}}\",\n\t\"iv\":\"{{xs2aform.iv}}\",\n\t\"ct\":\"{{xs2aform.ct}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/PSD2-testbank/decoupled/otp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":authorization\")) {",
									"    throw new Error(\"Authorization form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var form = {",
									"    \"form_identifier\":pm.environment.get(\"xs2aform.identifier\"),",
									"    \"data\": [",
									"        { \"key\": \"bias.apis.forms.elements.OtpElement\", \"value\": \"decoupled\" }",
									"    ]",
									"};",
									"",
									"var encrypted = XS2A.encryptForm(form, pm.environment.get(\"xs2aform.key\"));",
									"pm.environment.set(\"xs2aform.ct\", encrypted.ct);",
									"pm.environment.set(\"xs2aform.iv\", encrypted.iv);",
									"pm.environment.set(\"xs2aform.ek\", encrypted.ek);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ek\":\"{{xs2aform.ek}}\",\n\t\"iv\":\"{{xs2aform.iv}}\",\n\t\"ct\":\"{{xs2aform.ct}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/PSD2-testbank/decoupled/complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":authentication\") && !pm.environment.get(\"xs2aform.last_step\").endsWith(\":authorization\")) {",
									"    throw new Error(\"Authentication or Authorization form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "{{origin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/PSD2-testbank/embedded/login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":authentication\")) {",
									"    throw new Error(\"Authentication form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var form = {",
									"    \"form_identifier\":pm.environment.get(\"xs2aform.identifier\"),",
									"    \"data\": [",
									"        { \"key\": \"bias.apis.forms.elements.UsernameElement\", \"value\": \"567890\" },",
									"        { \"key\": \"bias.apis.forms.elements.PasswordElement\", \"value\": \"123456\" },",
									"    ]",
									"};",
									"",
									"var encrypted = XS2A.encryptForm(form, pm.environment.get(\"xs2aform.key\"));",
									"pm.environment.set(\"xs2aform.ct\", encrypted.ct);",
									"pm.environment.set(\"xs2aform.iv\", encrypted.iv);",
									"pm.environment.set(\"xs2aform.ek\", encrypted.ek);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{origin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ek\":\"{{xs2aform.ek}}\",\n\t\"iv\":\"{{xs2aform.iv}}\",\n\t\"ct\":\"{{xs2aform.ct}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/PSD2-testbank/embedded/otp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":authorization\")) {",
									"    throw new Error(\"Authorization form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var form = {",
									"    \"form_identifier\":pm.environment.get(\"xs2aform.identifier\"),",
									"    \"data\": [",
									"        { \"key\": \"bias.apis.forms.elements.OtpElement\", \"value\": \"123456\" }",
									"    ]",
									"};",
									"",
									"var encrypted = XS2A.encryptForm(form, pm.environment.get(\"xs2aform.key\"));",
									"pm.environment.set(\"xs2aform.ct\", encrypted.ct);",
									"pm.environment.set(\"xs2aform.iv\", encrypted.iv);",
									"pm.environment.set(\"xs2aform.ek\", encrypted.ek);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{origin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ek\":\"{{xs2aform.ek}}\",\n\t\"iv\":\"{{xs2aform.iv}}\",\n\t\"ct\":\"{{xs2aform.ct}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Auth API - fallback-testbank (white label only)",
			"item": [
				{
					"name": "/wizard/v1/ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "{{origin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/fallback-testbank/select-testbank",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").startsWith(\"bank_search:\")) {",
									"    throw new Error(\"Bank selection form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"bank_code\":\"00000\",\n\t\"country_code\":\"DE\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/fallback-testbank/select-transport-fallback",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":transport_selection\")) {",
									"    throw new Error(\"Transport selection form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var form = {",
									"    \"form_identifier\":pm.environment.get(\"xs2aform.identifier\"),",
									"    \"data\":[",
									"        { \"key\": \"interface\", \"value\": \"de_testbank_www_java\" }",
									"    ]};",
									"",
									"var encrypted = XS2A.encryptForm(form, pm.environment.get(\"xs2aform.key\"));",
									"pm.environment.set(\"xs2aform.ct\", encrypted.ct);",
									"pm.environment.set(\"xs2aform.iv\", encrypted.iv);",
									"pm.environment.set(\"xs2aform.ek\", encrypted.ek);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ek\":\"{{xs2aform.ek}}\",\n\t\"iv\":\"{{xs2aform.iv}}\",\n\t\"ct\":\"{{xs2aform.ct}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/fallback-testbank/select-first-account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":account_selection\")) {",
									"    throw new Error(\"Account selection form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var form = {",
									"    \"form_identifier\":pm.environment.get(\"xs2aform.identifier\"),",
									"    \"data\": [",
									"        { \"key\": \"account_id\", \"value\": pm.environment.get(\"xs2aform.selected_account\")}",
									"    ]",
									"};",
									"",
									"var encrypted = XS2A.encryptForm(form, pm.environment.get(\"xs2aform.key\"));",
									"pm.environment.set(\"xs2aform.ct\", encrypted.ct);",
									"pm.environment.set(\"xs2aform.iv\", encrypted.iv);",
									"pm.environment.set(\"xs2aform.ek\", encrypted.ek);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{origin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ek\":\"{{xs2aform.ek}}\",\n\t\"iv\":\"{{xs2aform.iv}}\",\n\t\"ct\":\"{{xs2aform.ct}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/fallback-testbank/embedded/login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":authentication\")) {",
									"    throw new Error(\"Authentication form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var form = {",
									"    \"form_identifier\":pm.environment.get(\"xs2aform.identifier\"),",
									"    \"data\":[",
									"        { \"key\": \"LOGINNAME__USER_ID\", \"value\": \"567890\" },",
									"        { \"key\": \"USER_PIN\", \"value\": \"123456\" },",
									"    ]};",
									"",
									"var encrypted = XS2A.encryptForm(form, pm.environment.get(\"xs2aform.key\"));",
									"pm.environment.set(\"xs2aform.ct\", encrypted.ct);",
									"pm.environment.set(\"xs2aform.iv\", encrypted.iv);",
									"pm.environment.set(\"xs2aform.ek\", encrypted.ek);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ek\":\"{{xs2aform.ek}}\",\n\t\"iv\":\"{{xs2aform.iv}}\",\n\t\"ct\":\"{{xs2aform.ct}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wizard/v1/ID/fallback-testbank/embedded/tan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"xs2aform.last_step\").endsWith(\":authorization\")) {",
									"    throw new Error(\"Authorization form expected, but requested form was: \" + pm.environment.get(\"xs2aform.last_step\"));",
									"}",
									"",
									"var form = {",
									"    \"form_identifier\":pm.environment.get(\"xs2aform.identifier\"),",
									"    \"data\":[",
									"        { \"key\": \"tan\", \"value\": \"12345\" }",
									"    ]};",
									"",
									"var encrypted = XS2A.encryptForm(form, pm.environment.get(\"xs2aform.key\"));",
									"pm.environment.set(\"xs2aform.ct\", encrypted.ct);",
									"pm.environment.set(\"xs2aform.iv\", encrypted.iv);",
									"pm.environment.set(\"xs2aform.ek\", encrypted.ek);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (pm.response.code == 200 && jsonData.data.result) {",
									"    pm.environment.set(\"xs2aform.last_step\", jsonData.data.result.type + \":\" + jsonData.data.result.context);",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"form\") {",
									"        pm.environment.set(\"xs2aform.key\", jsonData.data.result.key);",
									"        pm.environment.set(\"xs2aform.identifier\", jsonData.data.result.form.form_identifier);",
									"",
									"        if (jsonData.data.result.form.elements[0].key && jsonData.data.result.form.elements[0].key == \"account_id\") {",
									"            pm.environment.set(\"xs2aform.selected_account\", jsonData.data.result.form.elements[0].options[0].value);",
									"        }",
									"    }",
									"    ",
									"    if (jsonData.data.result && jsonData.data.result.type == \"redirect\") {",
									"        pm.environment.set(\"xs2aform.redirect_id\", jsonData.data.result.redirect.id);",
									"        pm.environment.set(\"xs2aform.redirect_url\", jsonData.data.result.redirect.url);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ek\":\"{{xs2aform.ek}}\",\n\t\"iv\":\"{{xs2aform.iv}}\",\n\t\"ct\":\"{{xs2aform.ct}}\",\n\t\n\t\"keys\": {\n        \"hsm\": \"{{keys_hsm}}\",\n        \"aspsp_data\": \"{{keys_aspsp_data}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{auth_url}}",
							"host": [
								"{{auth_url}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Bank Universe v1",
			"item": [
				{
					"name": "/universe/countries",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{universe_env_url}}/v1/countries",
							"host": [
								"{{universe_env_url}}"
							],
							"path": [
								"v1",
								"countries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/universe/v1/banks/DE",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{universe_env_url}}/v1/banks?country_code=de",
							"host": [
								"{{universe_env_url}}"
							],
							"path": [
								"v1",
								"banks"
							],
							"query": [
								{
									"key": "country_code",
									"value": "de"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/universe/v1/banks/get per Bank- and CountryCode",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country_code\": \"DE\",\n    \"bank_code\": \"10070000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{universe_env_url}}/v1/banks/get",
							"host": [
								"{{universe_env_url}}"
							],
							"path": [
								"v1",
								"banks",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "/universe/v1/banks/get per BIC",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bic\": \"DEUTDEBB174\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{universe_env_url}}/v1/banks/get",
							"host": [
								"{{universe_env_url}}"
							],
							"path": [
								"v1",
								"banks",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "/universe/v1/banks/get per IBAN",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"iban\": \"DE12500105170648489890\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{universe_env_url}}/v1/banks/get",
							"host": [
								"{{universe_env_url}}"
							],
							"path": [
								"v1",
								"banks",
								"get"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Bank Universe v2",
			"item": [
				{
					"name": "/v2/countries/list",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{universe_env_url}}/v2/countries/list",
							"host": [
								"{{universe_env_url}}"
							],
							"path": [
								"v2",
								"countries",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v2/integrations/list",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"DE\",\n    \"filter\": {\n        \"access_methods\": [\n            \"PSD2\"\n        ]\n    },\n    \"pagination\": {\n        \"size\": 10,\n        \"offset\": 0\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{universe_env_url}}/v2/integrations/list",
							"host": [
								"{{universe_env_url}}"
							],
							"path": [
								"v2",
								"integrations",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v2/bank-groups/list",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"DE\",\n    \"pagination\": {\n        \"size\": 10,\n        \"offset\": 0\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{universe_env_url}}/v2/bank-groups/list",
							"host": [
								"{{universe_env_url}}"
							],
							"path": [
								"v2",
								"bank-groups",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v2/bank-groups/get",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bank_group_krn\": \"krn:openbanking:global:bank-group:a51ac6f3-04cd-4c77-9a2a-35dc9c9f3f8f\",\n    \"country\": \"DE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{universe_env_url}}/v2/bank-groups/get",
							"host": [
								"{{universe_env_url}}"
							],
							"path": [
								"v2",
								"bank-groups",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v2/banks/list",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"DE\",\n    \"filter\": {\n        \"access_methods\": [\n            \"PSD2\"\n        ]\n    },\n    \"pagination\": {\n        \"size\": 10,\n        \"offset\": 0\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{universe_env_url}}/v2/banks/list",
							"host": [
								"{{universe_env_url}}"
							],
							"path": [
								"v2",
								"banks",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v2/banks/search",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"iban\": \"DE06000000000023456789\",\n    \"country\": \"DE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{universe_env_url}}/v2/banks/search",
							"host": [
								"{{universe_env_url}}"
							],
							"path": [
								"v2",
								"banks",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v2/banks/get",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"DE\",\n    \"bank_krn\": \"krn:openbanking:global:bank:f15ca33f-cd76-46b8-88f3-403e11bdc710\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{universe_env_url}}/v2/banks/get",
							"host": [
								"{{universe_env_url}}"
							],
							"path": [
								"v2",
								"banks",
								"get"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "Token {{access_token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.environment.name || !pm.environment.name.startsWith(\"KOB\")) {",
					"    throw new Error(\"Invalid environment selected\");",
					"}",
					"",
					"XS2A = {};",
					"XS2A.parseClientToken = function(rawClientToken) {",
					"    var rawClientTokenArray = rawClientToken.split(\".\")[1];",
					"    return JSON.parse(CryptoJS.enc.Utf8.stringify(CryptoJS.enc.Base64.parse(rawClientTokenArray)));",
					"}",
					"",
					"var navigator={};",
					"var window={};",
					"",
					"/******/ (function(modules) { // webpackBootstrap",
					"/******/ \t// The module cache",
					"/******/ \tvar installedModules = {};",
					"/******/",
					"/******/ \t// The require function",
					"/******/ \tfunction __webpack_require__(moduleId) {",
					"/******/",
					"/******/ \t\t// Check if module is in cache",
					"/******/ \t\tif(installedModules[moduleId]) {",
					"/******/ \t\t\treturn installedModules[moduleId].exports;",
					"/******/ \t\t}",
					"/******/ \t\t// Create a new module (and put it into the cache)",
					"/******/ \t\tvar module = installedModules[moduleId] = {",
					"/******/ \t\t\ti: moduleId,",
					"/******/ \t\t\tl: false,",
					"/******/ \t\t\texports: {}",
					"/******/ \t\t};",
					"/******/",
					"/******/ \t\t// Execute the module function",
					"/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);",
					"/******/",
					"/******/ \t\t// Flag the module as loaded",
					"/******/ \t\tmodule.l = true;",
					"/******/",
					"/******/ \t\t// Return the exports of the module",
					"/******/ \t\treturn module.exports;",
					"/******/ \t}",
					"/******/",
					"/******/",
					"/******/ \t// expose the modules object (__webpack_modules__)",
					"/******/ \t__webpack_require__.m = modules;",
					"/******/",
					"/******/ \t// expose the module cache",
					"/******/ \t__webpack_require__.c = installedModules;",
					"/******/",
					"/******/ \t// define getter function for harmony exports",
					"/******/ \t__webpack_require__.d = function(exports, name, getter) {",
					"/******/ \t\tif(!__webpack_require__.o(exports, name)) {",
					"/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });",
					"/******/ \t\t}",
					"/******/ \t};",
					"/******/",
					"/******/ \t// define __esModule on exports",
					"/******/ \t__webpack_require__.r = function(exports) {",
					"/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {",
					"/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });",
					"/******/ \t\t}",
					"/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });",
					"/******/ \t};",
					"/******/",
					"/******/ \t// create a fake namespace object",
					"/******/ \t// mode & 1: value is a module id, require it",
					"/******/ \t// mode & 2: merge all properties of value into the ns",
					"/******/ \t// mode & 4: return value when already ns object",
					"/******/ \t// mode & 8|1: behave like require",
					"/******/ \t__webpack_require__.t = function(value, mode) {",
					"/******/ \t\tif(mode & 1) value = __webpack_require__(value);",
					"/******/ \t\tif(mode & 8) return value;",
					"/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;",
					"/******/ \t\tvar ns = Object.create(null);",
					"/******/ \t\t__webpack_require__.r(ns);",
					"/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });",
					"/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));",
					"/******/ \t\treturn ns;",
					"/******/ \t};",
					"/******/",
					"/******/ \t// getDefaultExport function for compatibility with non-harmony modules",
					"/******/ \t__webpack_require__.n = function(module) {",
					"/******/ \t\tvar getter = module && module.__esModule ?",
					"/******/ \t\t\tfunction getDefault() { return module['default']; } :",
					"/******/ \t\t\tfunction getModuleExports() { return module; };",
					"/******/ \t\t__webpack_require__.d(getter, 'a', getter);",
					"/******/ \t\treturn getter;",
					"/******/ \t};",
					"/******/",
					"/******/ \t// Object.prototype.hasOwnProperty.call",
					"/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };",
					"/******/",
					"/******/ \t// __webpack_public_path__",
					"/******/ \t__webpack_require__.p = \"\";",
					"/******/",
					"/******/",
					"/******/ \t// Load entry module and return exports",
					"/******/ \treturn __webpack_require__(__webpack_require__.s = 0);",
					"/******/ })",
					"/************************************************************************/",
					"/******/ ([",
					"/* 0 */",
					"/***/ (function(module, __webpack_exports__, __webpack_require__) {",
					"",
					"\"use strict\";",
					"__webpack_require__.r(__webpack_exports__);",
					"/* harmony import */ var _klarna_xs2a_client_js_dist_cryptography_encrypt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);",
					"/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12);",
					"/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jwt_decode__WEBPACK_IMPORTED_MODULE_1__);",
					"",
					"",
					"",
					"XS2A.encryptFormString = (form, jwtKey) => Object(_klarna_xs2a_client_js_dist_cryptography_encrypt__WEBPACK_IMPORTED_MODULE_0__[\"encrypt\"])(form, jwt_decode__WEBPACK_IMPORTED_MODULE_1___default()(jwtKey))",
					"",
					"XS2A.encryptForm = function(form, jwtKey) {",
					"    return JSON.parse(XS2A.encryptFormString(form, jwtKey));",
					"}",
					"",
					"/***/ }),",
					"/* 1 */",
					"/***/ (function(module, __webpack_exports__, __webpack_require__) {",
					"",
					"\"use strict\";",
					"__webpack_require__.r(__webpack_exports__);",
					"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"encrypt\", function() { return encrypt; });",
					"/* harmony import */ var _lib_rsa_encrypt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);",
					"",
					"",
					"var AES = __webpack_require__(3);",
					"",
					"var Hex = __webpack_require__(11);",
					"",
					"var Base64 = __webpack_require__(5);",
					"/**",
					" * Generates a random hex string with the given byte length",
					" * For the random generation window.crypto is used if available.",
					" * As fallback Math.random() is used",
					" *",
					" * @param {number} byteLength of the string to be generated (string length = 2*byte length)",
					" * @return {string} random hex string",
					" */",
					"",
					"",
					"var generateRandomHexString = function generateRandomHexString(byteLength) {",
					"  // Create a array with random bytes",
					"  var buf;",
					"  var crypto = window.crypto || window.msCrypto;",
					"",
					"  if (crypto && crypto.getRandomValues) {",
					"    buf = new Uint8Array(byteLength);",
					"    crypto.getRandomValues(buf);",
					"  } else {",
					"    buf = [];",
					"",
					"    for (var i = 0; i < byteLength; i++) {",
					"      buf[i] = Math.random() * 0x100000000 & 0xff;",
					"    }",
					"  } // Convert byte array to hexstring",
					"",
					"",
					"  var res = '';",
					"",
					"  for (var j = 0; j < buf.length; j++) {",
					"    res += ('0' + (buf[j] & 0xff).toString(16)).slice(-2);",
					"  }",
					"",
					"  return res;",
					"};",
					"/**",
					" * Encrypts the given object and returns a string with data that are needed to decrypt it later",
					" *",
					" * @param {any} res javascript value which will be JSON.stringified and then encrypted",
					" * @param {object} publicKey the key to encrypt a randomly generated key",
					" * @param {string} publicKey.modulus",
					" * @param {string} publicKey.exponent",
					" * @param {object} config holding configuration options:",
					" * @param {number} config.keyBitSize the Size of the encryptionkey which will be generated",
					" * @return {string | boolean} stringified json if encryption was success, false if not",
					" */",
					"",
					"",
					"var encrypt = function encrypt() {",
					"  var res = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};",
					"  var publicKey = arguments.length > 1 ? arguments[1] : undefined;",
					"  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {",
					"    keyBitSize: 256",
					"  };",
					"",
					"  if (!publicKey || !publicKey.exponent || !publicKey.modulus) {",
					"    throw new Error('No or wrongly formatted Public Key for Encryption given');",
					"  }",
					"",
					"  var plainText = JSON.stringify(res);",
					"  var iv = generateRandomHexString(16);",
					"  var keyHex = generateRandomHexString(config.keyBitSize / 8);",
					"  var key = Hex.parse(keyHex);",
					"  var encrypted = AES.encrypt(plainText, key, {",
					"    iv: Hex.parse(iv)",
					"  });",
					"  var ciphertext = encrypted.ciphertext.toString(Base64);",
					"  var rsa = new _lib_rsa_encrypt__WEBPACK_IMPORTED_MODULE_0__[\"RSA\"].key(); // eslint-disable-line new-cap",
					"",
					"  rsa.setPublic(publicKey.modulus, publicKey.exponent);",
					"  var encryptedKey = _lib_rsa_encrypt__WEBPACK_IMPORTED_MODULE_0__[\"RSA\"].hex2b64(rsa.encrypt(keyHex));",
					"  return JSON.stringify({",
					"    ct: ciphertext,",
					"    iv: iv,",
					"    ek: encryptedKey",
					"  });",
					"};",
					"",
					"/***/ }),",
					"/* 2 */",
					"/***/ (function(module, __webpack_exports__, __webpack_require__) {",
					"",
					"\"use strict\";",
					"__webpack_require__.r(__webpack_exports__);",
					"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RSA\", function() { return RSA; });",
					"// prettier-disable",
					"var RSA = function () {",
					"  /** BEGIN JSBN (http://www-cs-students.stanford.edu/~tjw/jsbn/jsbn.js) **/",
					"",
					"  /*!",
					"  * Copyright (c) 2003-2005  Tom Wu",
					"  * All Rights Reserved.",
					"  *",
					"  * Permission is hereby granted, free of charge, to any person obtaining",
					"  * a copy of this software and associated documentation files (the",
					"  * \"Software\"), to deal in the Software without restriction, including",
					"  * without limitation the rights to use, copy, modify, merge, publish,",
					"  * distribute, sublicense, and/or sell copies of the Software, and to",
					"  * permit persons to whom the Software is furnished to do so, subject to",
					"  * the following conditions:",
					"  *",
					"  * The above copyright notice and this permission notice shall be",
					"  * included in all copies or substantial portions of the Software.",
					"  *",
					"  * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,",
					"  * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY",
					"  * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
					"  *",
					"  * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,",
					"  * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER",
					"  * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF",
					"  * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT",
					"  * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
					"  *",
					"  * In addition, the following condition applies:",
					"  *",
					"  * All redistributions must retain an intact copy of this copyright notice",
					"  * and disclaimer.",
					"  */",
					"  // Basic JavaScript BN library - subset useful for RSA encryption.",
					"  // Bits per digit",
					"  var dbits; // JavaScript engine analysis",
					"",
					"  var canary = 0xdeadbeefcafe;",
					"  var j_lm = (canary & 0xffffff) == 0xefcafe; // (public) Constructor",
					"",
					"  function BigInteger(a, b, c) {",
					"    if (a != null) if ('number' == typeof a) this.fromNumber(a, b, c);else if (b == null && 'string' != typeof a) this.fromString(a, 256);else this.fromString(a, b);",
					"  } // return new, unset BigInteger",
					"",
					"",
					"  function nbi() {",
					"    return new BigInteger(null);",
					"  } // am: Compute w_j += (x*this_i), propagate carries,",
					"  // c is initial carry, returns final carry.",
					"  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue",
					"  // We need to select the fastest one that works in this environment.",
					"  // am1: use a single mult and divide to get the high bits,",
					"  // max digit bits should be 26 because",
					"  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)",
					"",
					"",
					"  function am1(i, x, w, j, c, n) {",
					"    while (--n >= 0) {",
					"      var v = x * this[i++] + w[j] + c;",
					"      c = Math.floor(v / 0x4000000);",
					"      w[j++] = v & 0x3ffffff;",
					"    }",
					"",
					"    return c;",
					"  } // am2 avoids a big mult-and-extract completely.",
					"  // Max digit bits should be <= 30 because we do bitwise ops",
					"  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)",
					"",
					"",
					"  function am2(i, x, w, j, c, n) {",
					"    var xl = x & 0x7fff,",
					"        xh = x >> 15;",
					"",
					"    while (--n >= 0) {",
					"      var l = this[i] & 0x7fff;",
					"      var h = this[i++] >> 15;",
					"      var m = xh * l + h * xl;",
					"      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);",
					"      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);",
					"      w[j++] = l & 0x3fffffff;",
					"    }",
					"",
					"    return c;",
					"  } // Alternately, set max digit bits to 28 since some",
					"  // browsers slow down when dealing with 32-bit numbers.",
					"",
					"",
					"  function am3(i, x, w, j, c, n) {",
					"    var xl = x & 0x3fff,",
					"        xh = x >> 14;",
					"",
					"    while (--n >= 0) {",
					"      var l = this[i] & 0x3fff;",
					"      var h = this[i++] >> 14;",
					"      var m = xh * l + h * xl;",
					"      l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;",
					"      c = (l >> 28) + (m >> 14) + xh * h;",
					"      w[j++] = l & 0xfffffff;",
					"    }",
					"",
					"    return c;",
					"  }",
					"",
					"  if (j_lm && navigator.appName == 'Microsoft Internet Explorer') {",
					"    BigInteger.prototype.am = am2;",
					"    dbits = 30;",
					"  } else if (j_lm && navigator.appName != 'Netscape') {",
					"    BigInteger.prototype.am = am1;",
					"    dbits = 26;",
					"  } else {",
					"    // Mozilla/Netscape seems to prefer am3",
					"    BigInteger.prototype.am = am3;",
					"    dbits = 28;",
					"  }",
					"",
					"  BigInteger.prototype.DB = dbits;",
					"  BigInteger.prototype.DM = (1 << dbits) - 1;",
					"  BigInteger.prototype.DV = 1 << dbits;",
					"  var BI_FP = 52;",
					"  BigInteger.prototype.FV = Math.pow(2, BI_FP);",
					"  BigInteger.prototype.F1 = BI_FP - dbits;",
					"  BigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions",
					"",
					"  var BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';",
					"  var BI_RC = new Array();",
					"  var rr, vv;",
					"  rr = '0'.charCodeAt(0);",
					"",
					"  for (vv = 0; vv <= 9; ++vv) {",
					"    BI_RC[rr++] = vv;",
					"  }",
					"",
					"  rr = 'a'.charCodeAt(0);",
					"",
					"  for (vv = 10; vv < 36; ++vv) {",
					"    BI_RC[rr++] = vv;",
					"  }",
					"",
					"  rr = 'A'.charCodeAt(0);",
					"",
					"  for (vv = 10; vv < 36; ++vv) {",
					"    BI_RC[rr++] = vv;",
					"  }",
					"",
					"  function int2char(n) {",
					"    return BI_RM.charAt(n);",
					"  }",
					"",
					"  function intAt(s, i) {",
					"    var c = BI_RC[s.charCodeAt(i)];",
					"    return c == null ? -1 : c;",
					"  } // (protected) copy this to r",
					"",
					"",
					"  function bnpCopyTo(r) {",
					"    for (var i = this.t - 1; i >= 0; --i) {",
					"      r[i] = this[i];",
					"    }",
					"",
					"    r.t = this.t;",
					"    r.s = this.s;",
					"  } // (protected) set from integer value x, -DV <= x < DV",
					"",
					"",
					"  function bnpFromInt(x) {",
					"    this.t = 1;",
					"    this.s = x < 0 ? -1 : 0;",
					"    if (x > 0) this[0] = x;else if (x < -1) this[0] = x + this.DV;else this.t = 0;",
					"  } // return bigint initialized to value",
					"",
					"",
					"  function nbv(i) {",
					"    var r = nbi();",
					"    r.fromInt(i);",
					"    return r;",
					"  } // (protected) set from string and radix",
					"",
					"",
					"  function bnpFromString(s, b) {",
					"    var k;",
					"    if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 256) k = 8;else if (b == 2) // byte array",
					"      k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else {",
					"      this.fromRadix(s, b);",
					"      return;",
					"    }",
					"    this.t = 0;",
					"    this.s = 0;",
					"    var i = s.length,",
					"        mi = false,",
					"        sh = 0;",
					"",
					"    while (--i >= 0) {",
					"      var x = k == 8 ? s[i] & 0xff : intAt(s, i);",
					"",
					"      if (x < 0) {",
					"        if (s.charAt(i) == '-') mi = true;",
					"        continue;",
					"      }",
					"",
					"      mi = false;",
					"      if (sh == 0) this[this.t++] = x;else if (sh + k > this.DB) {",
					"        this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;",
					"        this[this.t++] = x >> this.DB - sh;",
					"      } else this[this.t - 1] |= x << sh;",
					"      sh += k;",
					"      if (sh >= this.DB) sh -= this.DB;",
					"    }",
					"",
					"    if (k == 8 && (s[0] & 0x80) != 0) {",
					"      this.s = -1;",
					"      if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;",
					"    }",
					"",
					"    this.clamp();",
					"    if (mi) BigInteger.ZERO.subTo(this, this);",
					"  } // (protected) clamp off excess high words",
					"",
					"",
					"  function bnpClamp() {",
					"    var c = this.s & this.DM;",
					"",
					"    while (this.t > 0 && this[this.t - 1] == c) {",
					"      --this.t;",
					"    }",
					"  } // (public) return string representation in given radix",
					"",
					"",
					"  function bnToString(b) {",
					"    if (this.s < 0) return '-' + this.negate().toString(b);",
					"    var k;",
					"    if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return this.toRadix(b);",
					"    var km = (1 << k) - 1,",
					"        d,",
					"        m = false,",
					"        r = '',",
					"        i = this.t;",
					"    var p = this.DB - i * this.DB % k;",
					"",
					"    if (i-- > 0) {",
					"      if (p < this.DB && (d = this[i] >> p) > 0) {",
					"        m = true;",
					"        r = int2char(d);",
					"      }",
					"",
					"      while (i >= 0) {",
					"        if (p < k) {",
					"          d = (this[i] & (1 << p) - 1) << k - p;",
					"          d |= this[--i] >> (p += this.DB - k);",
					"        } else {",
					"          d = this[i] >> (p -= k) & km;",
					"",
					"          if (p <= 0) {",
					"            p += this.DB;",
					"            --i;",
					"          }",
					"        }",
					"",
					"        if (d > 0) m = true;",
					"        if (m) r += int2char(d);",
					"      }",
					"    }",
					"",
					"    return m ? r : '0';",
					"  } // (public) -this",
					"",
					"",
					"  function bnNegate() {",
					"    var r = nbi();",
					"    BigInteger.ZERO.subTo(this, r);",
					"    return r;",
					"  } // (public) |this|",
					"",
					"",
					"  function bnAbs() {",
					"    return this.s < 0 ? this.negate() : this;",
					"  } // (public) return + if this > a, - if this < a, 0 if equal",
					"",
					"",
					"  function bnCompareTo(a) {",
					"    var r = this.s - a.s;",
					"    if (r != 0) return r;",
					"    var i = this.t;",
					"    r = i - a.t;",
					"    if (r != 0) return this.s < 0 ? -r : r;",
					"",
					"    while (--i >= 0) {",
					"      if ((r = this[i] - a[i]) != 0) return r;",
					"    }",
					"",
					"    return 0;",
					"  } // returns bit length of the integer x",
					"",
					"",
					"  function nbits(x) {",
					"    var r = 1,",
					"        t;",
					"",
					"    if ((t = x >>> 16) != 0) {",
					"      x = t;",
					"      r += 16;",
					"    }",
					"",
					"    if ((t = x >> 8) != 0) {",
					"      x = t;",
					"      r += 8;",
					"    }",
					"",
					"    if ((t = x >> 4) != 0) {",
					"      x = t;",
					"      r += 4;",
					"    }",
					"",
					"    if ((t = x >> 2) != 0) {",
					"      x = t;",
					"      r += 2;",
					"    }",
					"",
					"    if ((t = x >> 1) != 0) {",
					"      x = t;",
					"      r += 1;",
					"    }",
					"",
					"    return r;",
					"  } // (public) return the number of bits in \"this\"",
					"",
					"",
					"  function bnBitLength() {",
					"    if (this.t <= 0) return 0;",
					"    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);",
					"  } // (protected) r = this << n*DB",
					"",
					"",
					"  function bnpDLShiftTo(n, r) {",
					"    var i;",
					"",
					"    for (i = this.t - 1; i >= 0; --i) {",
					"      r[i + n] = this[i];",
					"    }",
					"",
					"    for (i = n - 1; i >= 0; --i) {",
					"      r[i] = 0;",
					"    }",
					"",
					"    r.t = this.t + n;",
					"    r.s = this.s;",
					"  } // (protected) r = this >> n*DB",
					"",
					"",
					"  function bnpDRShiftTo(n, r) {",
					"    for (var i = n; i < this.t; ++i) {",
					"      r[i - n] = this[i];",
					"    }",
					"",
					"    r.t = Math.max(this.t - n, 0);",
					"    r.s = this.s;",
					"  } // (protected) r = this << n",
					"",
					"",
					"  function bnpLShiftTo(n, r) {",
					"    var bs = n % this.DB;",
					"    var cbs = this.DB - bs;",
					"    var bm = (1 << cbs) - 1;",
					"    var ds = Math.floor(n / this.DB),",
					"        c = this.s << bs & this.DM,",
					"        i;",
					"",
					"    for (i = this.t - 1; i >= 0; --i) {",
					"      r[i + ds + 1] = this[i] >> cbs | c;",
					"      c = (this[i] & bm) << bs;",
					"    }",
					"",
					"    for (i = ds - 1; i >= 0; --i) {",
					"      r[i] = 0;",
					"    }",
					"",
					"    r[ds] = c;",
					"    r.t = this.t + ds + 1;",
					"    r.s = this.s;",
					"    r.clamp();",
					"  } // (protected) r = this >> n",
					"",
					"",
					"  function bnpRShiftTo(n, r) {",
					"    r.s = this.s;",
					"    var ds = Math.floor(n / this.DB);",
					"",
					"    if (ds >= this.t) {",
					"      r.t = 0;",
					"      return;",
					"    }",
					"",
					"    var bs = n % this.DB;",
					"    var cbs = this.DB - bs;",
					"    var bm = (1 << bs) - 1;",
					"    r[0] = this[ds] >> bs;",
					"",
					"    for (var i = ds + 1; i < this.t; ++i) {",
					"      r[i - ds - 1] |= (this[i] & bm) << cbs;",
					"      r[i - ds] = this[i] >> bs;",
					"    }",
					"",
					"    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;",
					"    r.t = this.t - ds;",
					"    r.clamp();",
					"  } // (protected) r = this - a",
					"",
					"",
					"  function bnpSubTo(a, r) {",
					"    var i = 0,",
					"        c = 0,",
					"        m = Math.min(a.t, this.t);",
					"",
					"    while (i < m) {",
					"      c += this[i] - a[i];",
					"      r[i++] = c & this.DM;",
					"      c >>= this.DB;",
					"    }",
					"",
					"    if (a.t < this.t) {",
					"      c -= a.s;",
					"",
					"      while (i < this.t) {",
					"        c += this[i];",
					"        r[i++] = c & this.DM;",
					"        c >>= this.DB;",
					"      }",
					"",
					"      c += this.s;",
					"    } else {",
					"      c += this.s;",
					"",
					"      while (i < a.t) {",
					"        c -= a[i];",
					"        r[i++] = c & this.DM;",
					"        c >>= this.DB;",
					"      }",
					"",
					"      c -= a.s;",
					"    }",
					"",
					"    r.s = c < 0 ? -1 : 0;",
					"    if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;",
					"    r.t = i;",
					"    r.clamp();",
					"  } // (protected) r = this * a, r != this,a (HAC 14.12)",
					"  // \"this\" should be the larger one if appropriate.",
					"",
					"",
					"  function bnpMultiplyTo(a, r) {",
					"    var x = this.abs(),",
					"        y = a.abs();",
					"    var i = x.t;",
					"    r.t = i + y.t;",
					"",
					"    while (--i >= 0) {",
					"      r[i] = 0;",
					"    }",
					"",
					"    for (i = 0; i < y.t; ++i) {",
					"      r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);",
					"    }",
					"",
					"    r.s = 0;",
					"    r.clamp();",
					"    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);",
					"  } // (protected) r = this^2, r != this (HAC 14.16)",
					"",
					"",
					"  function bnpSquareTo(r) {",
					"    var x = this.abs();",
					"    var i = r.t = 2 * x.t;",
					"",
					"    while (--i >= 0) {",
					"      r[i] = 0;",
					"    }",
					"",
					"    for (i = 0; i < x.t - 1; ++i) {",
					"      var c = x.am(i, x[i], r, 2 * i, 0, 1);",
					"",
					"      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {",
					"        r[i + x.t] -= x.DV;",
					"        r[i + x.t + 1] = 1;",
					"      }",
					"    }",
					"",
					"    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);",
					"    r.s = 0;",
					"    r.clamp();",
					"  } // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)",
					"  // r != q, this != m.  q or r may be null.",
					"",
					"",
					"  function bnpDivRemTo(m, q, r) {",
					"    var pm = m.abs();",
					"    if (pm.t <= 0) return;",
					"    var pt = this.abs();",
					"",
					"    if (pt.t < pm.t) {",
					"      if (q != null) q.fromInt(0);",
					"      if (r != null) this.copyTo(r);",
					"      return;",
					"    }",
					"",
					"    if (r == null) r = nbi();",
					"    var y = nbi(),",
					"        ts = this.s,",
					"        ms = m.s;",
					"    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus",
					"",
					"    if (nsh > 0) {",
					"      pm.lShiftTo(nsh, y);",
					"      pt.lShiftTo(nsh, r);",
					"    } else {",
					"      pm.copyTo(y);",
					"      pt.copyTo(r);",
					"    }",
					"",
					"    var ys = y.t;",
					"    var y0 = y[ys - 1];",
					"    if (y0 == 0) return;",
					"    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);",
					"    var d1 = this.FV / yt,",
					"        d2 = (1 << this.F1) / yt,",
					"        e = 1 << this.F2;",
					"    var i = r.t,",
					"        j = i - ys,",
					"        t = q == null ? nbi() : q;",
					"    y.dlShiftTo(j, t);",
					"",
					"    if (r.compareTo(t) >= 0) {",
					"      r[r.t++] = 1;",
					"      r.subTo(t, r);",
					"    }",
					"",
					"    BigInteger.ONE.dlShiftTo(ys, t);",
					"    t.subTo(y, y); // \"negative\" y so we can replace sub with am later",
					"",
					"    while (y.t < ys) {",
					"      y[y.t++] = 0;",
					"    }",
					"",
					"    while (--j >= 0) {",
					"      // Estimate quotient digit",
					"      var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);",
					"",
					"      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {",
					"        // Try it out",
					"        y.dlShiftTo(j, t);",
					"        r.subTo(t, r);",
					"",
					"        while (r[i] < --qd) {",
					"          r.subTo(t, r);",
					"        }",
					"      }",
					"    }",
					"",
					"    if (q != null) {",
					"      r.drShiftTo(ys, q);",
					"      if (ts != ms) BigInteger.ZERO.subTo(q, q);",
					"    }",
					"",
					"    r.t = ys;",
					"    r.clamp();",
					"    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder",
					"",
					"    if (ts < 0) BigInteger.ZERO.subTo(r, r);",
					"  } // (public) this mod a",
					"",
					"",
					"  function bnMod(a) {",
					"    var r = nbi();",
					"    this.abs().divRemTo(a, null, r);",
					"    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);",
					"    return r;",
					"  } // Modular reduction using \"classic\" algorithm",
					"",
					"",
					"  function Classic(m) {",
					"    this.m = m;",
					"  }",
					"",
					"  function cConvert(x) {",
					"    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;",
					"  }",
					"",
					"  function cRevert(x) {",
					"    return x;",
					"  }",
					"",
					"  function cReduce(x) {",
					"    x.divRemTo(this.m, null, x);",
					"  }",
					"",
					"  function cMulTo(x, y, r) {",
					"    x.multiplyTo(y, r);",
					"    this.reduce(r);",
					"  }",
					"",
					"  function cSqrTo(x, r) {",
					"    x.squareTo(r);",
					"    this.reduce(r);",
					"  }",
					"",
					"  Classic.prototype.convert = cConvert;",
					"  Classic.prototype.revert = cRevert;",
					"  Classic.prototype.reduce = cReduce;",
					"  Classic.prototype.mulTo = cMulTo;",
					"  Classic.prototype.sqrTo = cSqrTo; // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction",
					"  // justification:",
					"  //         xy == 1 (mod m)",
					"  //         xy =  1+km",
					"  //   xy(2-xy) = (1+km)(1-km)",
					"  // x[y(2-xy)] = 1-k^2m^2",
					"  // x[y(2-xy)] == 1 (mod m^2)",
					"  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2",
					"  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.",
					"  // JS multiply \"overflows\" differently from C/C++, so care is needed here.",
					"",
					"  function bnpInvDigit() {",
					"    if (this.t < 1) return 0;",
					"    var x = this[0];",
					"    if ((x & 1) == 0) return 0;",
					"    var y = x & 3; // y == 1/x mod 2^2",
					"",
					"    y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4",
					"",
					"    y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8",
					"",
					"    y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16",
					"    // last step - calculate inverse mod DV directly;",
					"    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints",
					"",
					"    y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits",
					"    // we really want the negative inverse, and -DV < y < DV",
					"",
					"    return y > 0 ? this.DV - y : -y;",
					"  } // Montgomery reduction",
					"",
					"",
					"  function Montgomery(m) {",
					"    this.m = m;",
					"    this.mp = m.invDigit();",
					"    this.mpl = this.mp & 0x7fff;",
					"    this.mph = this.mp >> 15;",
					"    this.um = (1 << m.DB - 15) - 1;",
					"    this.mt2 = 2 * m.t;",
					"  } // xR mod m",
					"",
					"",
					"  function montConvert(x) {",
					"    var r = nbi();",
					"    x.abs().dlShiftTo(this.m.t, r);",
					"    r.divRemTo(this.m, null, r);",
					"    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);",
					"    return r;",
					"  } // x/R mod m",
					"",
					"",
					"  function montRevert(x) {",
					"    var r = nbi();",
					"    x.copyTo(r);",
					"    this.reduce(r);",
					"    return r;",
					"  } // x = x/R mod m (HAC 14.32)",
					"",
					"",
					"  function montReduce(x) {",
					"    while (x.t <= this.mt2 // pad x so am has enough room later",
					"    ) {",
					"      x[x.t++] = 0;",
					"    }",
					"",
					"    for (var i = 0; i < this.m.t; ++i) {",
					"      // faster way of calculating u0 = x[i]*mp mod DV",
					"      var j = x[i] & 0x7fff;",
					"      var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call",
					"",
					"      j = i + this.m.t;",
					"      x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry",
					"",
					"      while (x[j] >= x.DV) {",
					"        x[j] -= x.DV;",
					"        x[++j]++;",
					"      }",
					"    }",
					"",
					"    x.clamp();",
					"    x.drShiftTo(this.m.t, x);",
					"    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);",
					"  } // r = \"x^2/R mod m\"; x != r",
					"",
					"",
					"  function montSqrTo(x, r) {",
					"    x.squareTo(r);",
					"    this.reduce(r);",
					"  } // r = \"xy/R mod m\"; x,y != r",
					"",
					"",
					"  function montMulTo(x, y, r) {",
					"    x.multiplyTo(y, r);",
					"    this.reduce(r);",
					"  }",
					"",
					"  Montgomery.prototype.convert = montConvert;",
					"  Montgomery.prototype.revert = montRevert;",
					"  Montgomery.prototype.reduce = montReduce;",
					"  Montgomery.prototype.mulTo = montMulTo;",
					"  Montgomery.prototype.sqrTo = montSqrTo; // (protected) true iff this is even",
					"",
					"  function bnpIsEven() {",
					"    return (this.t > 0 ? this[0] & 1 : this.s) == 0;",
					"  } // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)",
					"",
					"",
					"  function bnpExp(e, z) {",
					"    if (e > 0xffffffff || e < 1) return BigInteger.ONE;",
					"    var r = nbi(),",
					"        r2 = nbi(),",
					"        g = z.convert(this),",
					"        i = nbits(e) - 1;",
					"    g.copyTo(r);",
					"",
					"    while (--i >= 0) {",
					"      z.sqrTo(r, r2);",
					"      if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {",
					"        var t = r;",
					"        r = r2;",
					"        r2 = t;",
					"      }",
					"    }",
					"",
					"    return z.revert(r);",
					"  } // (public) this^e % m, 0 <= e < 2^32",
					"",
					"",
					"  function bnModPowInt(e, m) {",
					"    var z;",
					"    if (e < 256 || m.isEven()) z = new Classic(m);else z = new Montgomery(m);",
					"    return this.exp(e, z);",
					"  } // protected",
					"",
					"",
					"  BigInteger.prototype.copyTo = bnpCopyTo;",
					"  BigInteger.prototype.fromInt = bnpFromInt;",
					"  BigInteger.prototype.fromString = bnpFromString;",
					"  BigInteger.prototype.clamp = bnpClamp;",
					"  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;",
					"  BigInteger.prototype.drShiftTo = bnpDRShiftTo;",
					"  BigInteger.prototype.lShiftTo = bnpLShiftTo;",
					"  BigInteger.prototype.rShiftTo = bnpRShiftTo;",
					"  BigInteger.prototype.subTo = bnpSubTo;",
					"  BigInteger.prototype.multiplyTo = bnpMultiplyTo;",
					"  BigInteger.prototype.squareTo = bnpSquareTo;",
					"  BigInteger.prototype.divRemTo = bnpDivRemTo;",
					"  BigInteger.prototype.invDigit = bnpInvDigit;",
					"  BigInteger.prototype.isEven = bnpIsEven;",
					"  BigInteger.prototype.exp = bnpExp; // public",
					"",
					"  BigInteger.prototype.toString = bnToString;",
					"  BigInteger.prototype.negate = bnNegate;",
					"  BigInteger.prototype.abs = bnAbs;",
					"  BigInteger.prototype.compareTo = bnCompareTo;",
					"  BigInteger.prototype.bitLength = bnBitLength;",
					"  BigInteger.prototype.mod = bnMod;",
					"  BigInteger.prototype.modPowInt = bnModPowInt; // \"constants\"",
					"",
					"  BigInteger.ZERO = nbv(0);",
					"  BigInteger.ONE = nbv(1);",
					"  /** END JSBN **/",
					"",
					"  /** BEGIN RNG (http://www-cs-students.stanford.edu/~tjw/jsbn/rng.js) */",
					"  // Random number generator - requires a PRNG backend, e.g. prng4.js",
					"  // For best results, put code like",
					"  // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>",
					"  // in your main HTML document.",
					"",
					"  var rng_state;",
					"  var rng_pool;",
					"  var rng_pptr; // Mix in a 32-bit integer into the pool",
					"",
					"  function rng_seed_int(x) {",
					"    rng_pool[rng_pptr++] ^= x & 255;",
					"    rng_pool[rng_pptr++] ^= x >> 8 & 255;",
					"    rng_pool[rng_pptr++] ^= x >> 16 & 255;",
					"    rng_pool[rng_pptr++] ^= x >> 24 & 255;",
					"    if (rng_pptr >= rng_psize) rng_pptr -= rng_psize;",
					"  } // Mix in the current time (w/milliseconds) into the pool",
					"",
					"",
					"  function rng_seed_time() {",
					"    rng_seed_int(new Date().getTime());",
					"  } // Initialize the pool with junk if needed.",
					"",
					"",
					"  if (rng_pool == null) {",
					"    rng_pool = new Array();",
					"    rng_pptr = 0;",
					"    var t;",
					"",
					"    if (window.crypto && window.crypto.getRandomValues) {",
					"      // Use webcrypto if available",
					"      var ua = new Uint8Array(32);",
					"      window.crypto.getRandomValues(ua);",
					"",
					"      for (t = 0; t < 32; ++t) {",
					"        rng_pool[rng_pptr++] = ua[t];",
					"      }",
					"    }",
					"",
					"    if (navigator.appName == 'Netscape' && navigator.appVersion < '5' && window.crypto) {",
					"      // Extract entropy (256 bits) from NS4 RNG if available",
					"      var z = window.crypto.random(32);",
					"",
					"      for (t = 0; t < z.length; ++t) {",
					"        rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;",
					"      }",
					"    }",
					"",
					"    while (rng_pptr < rng_psize) {",
					"      // extract some randomness from Math.random()",
					"      t = Math.floor(65536 * Math.random());",
					"      rng_pool[rng_pptr++] = t >>> 8;",
					"      rng_pool[rng_pptr++] = t & 255;",
					"    }",
					"",
					"    rng_pptr = 0;",
					"    rng_seed_time(); //rng_seed_int(window.screenX);",
					"    //rng_seed_int(window.screenY);",
					"  }",
					"",
					"  function rng_get_byte() {",
					"    if (rng_state == null) {",
					"      rng_seed_time();",
					"      rng_state = prng_newstate();",
					"      rng_state.init(rng_pool);",
					"",
					"      for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {",
					"        rng_pool[rng_pptr] = 0;",
					"      }",
					"",
					"      rng_pptr = 0; //rng_pool = null;",
					"    } // TODO: allow reseeding after first request",
					"",
					"",
					"    return rng_state.next();",
					"  }",
					"",
					"  function rng_get_bytes(ba) {",
					"    var i;",
					"",
					"    for (i = 0; i < ba.length; ++i) {",
					"      ba[i] = rng_get_byte();",
					"    }",
					"  }",
					"",
					"  function SecureRandom() {}",
					"",
					"  SecureRandom.prototype.nextBytes = rng_get_bytes;",
					"  /** END rng.js */",
					"",
					"  /** BEGIN prng4.js (http://www-cs-students.stanford.edu/~tjw/jsbn/prng4.js) */",
					"  // prng4.js - uses Arcfour as a PRNG",
					"",
					"  function Arcfour() {",
					"    this.i = 0;",
					"    this.j = 0;",
					"    this.S = new Array();",
					"  } // Initialize arcfour context from key, an array of ints, each from [0..255]",
					"",
					"",
					"  function ARC4init(key) {",
					"    var i, j, t;",
					"",
					"    for (i = 0; i < 256; ++i) {",
					"      this.S[i] = i;",
					"    }",
					"",
					"    j = 0;",
					"",
					"    for (i = 0; i < 256; ++i) {",
					"      j = j + this.S[i] + key[i % key.length] & 255;",
					"      t = this.S[i];",
					"      this.S[i] = this.S[j];",
					"      this.S[j] = t;",
					"    }",
					"",
					"    this.i = 0;",
					"    this.j = 0;",
					"  }",
					"",
					"  function ARC4next() {",
					"    var t;",
					"    this.i = this.i + 1 & 255;",
					"    this.j = this.j + this.S[this.i] & 255;",
					"    t = this.S[this.i];",
					"    this.S[this.i] = this.S[this.j];",
					"    this.S[this.j] = t;",
					"    return this.S[t + this.S[this.i] & 255];",
					"  }",
					"",
					"  Arcfour.prototype.init = ARC4init;",
					"  Arcfour.prototype.next = ARC4next; // Plug in your RNG constructor here",
					"",
					"  function prng_newstate() {",
					"    return new Arcfour();",
					"  } // Pool size must be a multiple of 4 and greater than 32.",
					"  // An array of bytes the size of the pool will be passed to init()",
					"",
					"",
					"  var rng_psize = 256;",
					"  /** END prng.js */",
					"",
					"  /** BEGIN rsa.js (http://www-cs-students.stanford.edu/~tjw/jsbn/rsa.js) */",
					"  // Depends on jsbn.js and rng.js",
					"  // Version 1.1: support utf-8 encoding in pkcs1pad2",
					"  // convert a (hex) string to a bignum object",
					"",
					"  function parseBigInt(str, r) {",
					"    return new BigInteger(str, r);",
					"  }",
					"",
					"  function linebrk(s, n) {",
					"    var ret = '';",
					"    var i = 0;",
					"",
					"    while (i + n < s.length) {",
					"      ret += s.substring(i, i + n) + '\\n';",
					"      i += n;",
					"    }",
					"",
					"    return ret + s.substring(i, s.length);",
					"  }",
					"",
					"  function byte2Hex(b) {",
					"    if (b < 0x10) return '0' + b.toString(16);else return b.toString(16);",
					"  } // PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint",
					"",
					"",
					"  function pkcs1pad2(s, n) {",
					"    if (n < s.length + 11) {",
					"      // TODO: fix for utf-8",
					"      throw Error('Message too long for RSA');",
					"    }",
					"",
					"    var ba = new Array();",
					"    var i = s.length - 1;",
					"",
					"    while (i >= 0 && n > 0) {",
					"      var c = s.charCodeAt(i--);",
					"",
					"      if (c < 128) {",
					"        // encode using utf-8",
					"        ba[--n] = c;",
					"      } else if (c > 127 && c < 2048) {",
					"        ba[--n] = c & 63 | 128;",
					"        ba[--n] = c >> 6 | 192;",
					"      } else {",
					"        ba[--n] = c & 63 | 128;",
					"        ba[--n] = c >> 6 & 63 | 128;",
					"        ba[--n] = c >> 12 | 224;",
					"      }",
					"    }",
					"",
					"    ba[--n] = 0;",
					"    var rng = new SecureRandom();",
					"    var x = new Array();",
					"",
					"    while (n > 2) {",
					"      // random non-zero pad",
					"      x[0] = 0;",
					"",
					"      while (x[0] == 0) {",
					"        rng.nextBytes(x);",
					"      }",
					"",
					"      ba[--n] = x[0];",
					"    }",
					"",
					"    ba[--n] = 2;",
					"    ba[--n] = 0;",
					"    return new BigInteger(ba);",
					"  } // \"empty\" RSA key constructor",
					"",
					"",
					"  function RSAKey() {",
					"    this.n = null;",
					"    this.e = 0;",
					"    this.d = null;",
					"    this.p = null;",
					"    this.q = null;",
					"    this.dmp1 = null;",
					"    this.dmq1 = null;",
					"    this.coeff = null;",
					"  } // Set the public key fields N and e from hex strings",
					"",
					"",
					"  function RSASetPublic(N, E) {",
					"    if (N != null && E != null && N.length > 0 && E.length > 0) {",
					"      this.n = parseBigInt(N, 16);",
					"      this.e = parseInt(E, 16);",
					"    } else throw Error('Invalid RSA public key');",
					"  } // Perform raw public operation on \"x\": return x^e (mod n)",
					"",
					"",
					"  function RSADoPublic(x) {",
					"    return x.modPowInt(this.e, this.n);",
					"  } // Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string",
					"",
					"",
					"  function RSAEncrypt(text) {",
					"    var m = pkcs1pad2(text, this.n.bitLength() + 7 >> 3);",
					"    if (m == null) return null;",
					"    var c = this.doPublic(m);",
					"    if (c == null) return null;",
					"    var h = c.toString(16);",
					"    if ((h.length & 1) == 0) return h;else return '0' + h;",
					"  } // Return the PKCS#1 RSA encryption of \"text\" as a Base64-encoded string",
					"  //function RSAEncryptB64(text) {",
					"  //  var h = this.encrypt(text);",
					"  //  if(h) return hex2b64(h); else return null;",
					"  //}",
					"  // protected",
					"",
					"",
					"  RSAKey.prototype.doPublic = RSADoPublic; // public",
					"",
					"  RSAKey.prototype.setPublic = RSASetPublic;",
					"  RSAKey.prototype.encrypt = RSAEncrypt; //RSAKey.prototype.encrypt_b64 = RSAEncryptB64;",
					"",
					"  var b64map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';",
					"  var b64padchar = '=';",
					"",
					"  function hex2b64(h) {",
					"    var i;",
					"    var c;",
					"    var ret = '';",
					"",
					"    for (i = 0; i + 3 <= h.length; i += 3) {",
					"      c = parseInt(h.substring(i, i + 3), 16);",
					"      ret += b64map.charAt(c >> 6) + b64map.charAt(c & 63);",
					"    }",
					"",
					"    if (i + 1 == h.length) {",
					"      c = parseInt(h.substring(i, i + 1), 16);",
					"      ret += b64map.charAt(c << 2);",
					"    } else if (i + 2 == h.length) {",
					"      c = parseInt(h.substring(i, i + 2), 16);",
					"      ret += b64map.charAt(c >> 2) + b64map.charAt((c & 3) << 4);",
					"    }",
					"",
					"    while ((ret.length & 3) > 0) {",
					"      ret += b64padchar;",
					"    }",
					"",
					"    return ret;",
					"  } // convert a base64 string to hex",
					"",
					"",
					"  function b64tohex(s) {",
					"    var ret = '';",
					"    var i;",
					"    var k = 0; // b64 state, 0-3",
					"",
					"    var slop;",
					"",
					"    for (i = 0; i < s.length; ++i) {",
					"      if (s.charAt(i) == b64padchar) break;",
					"      v = b64map.indexOf(s.charAt(i));",
					"      if (v < 0) continue;",
					"",
					"      if (k == 0) {",
					"        ret += int2char(v >> 2);",
					"        slop = v & 3;",
					"        k = 1;",
					"      } else if (k == 1) {",
					"        ret += int2char(slop << 2 | v >> 4);",
					"        slop = v & 0xf;",
					"        k = 2;",
					"      } else if (k == 2) {",
					"        ret += int2char(slop);",
					"        ret += int2char(v >> 2);",
					"        slop = v & 3;",
					"        k = 3;",
					"      } else {",
					"        ret += int2char(slop << 2 | v >> 4);",
					"        ret += int2char(v & 0xf);",
					"        k = 0;",
					"      }",
					"    }",
					"",
					"    if (k == 1) ret += int2char(slop << 2);",
					"    return ret;",
					"  } // convert a base64 string to a byte/number array",
					"",
					"",
					"  function b64toBA(s) {",
					"    //piggyback on b64tohex for now, optimize later",
					"    var h = b64tohex(s);",
					"    var i;",
					"    var a = new Array();",
					"",
					"    for (i = 0; 2 * i < h.length; ++i) {",
					"      a[i] = parseInt(h.substring(2 * i, 2 * i + 2), 16);",
					"    }",
					"",
					"    return a;",
					"  }",
					"",
					"  return {",
					"    key: RSAKey,",
					"    hex2b64: hex2b64",
					"  };",
					"}();",
					"",
					"/***/ }),",
					"/* 3 */",
					"/***/ (function(module, exports, __webpack_require__) {",
					"",
					";(function (root, factory, undef) {",
					"\tif (true) {",
					"\t\t// CommonJS",
					"\t\tmodule.exports = exports = factory(__webpack_require__(4), __webpack_require__(5), __webpack_require__(6), __webpack_require__(7), __webpack_require__(10));",
					"\t}",
					"\telse {}",
					"}(this, function (CryptoJS) {",
					"",
					"\t(function () {",
					"\t    // Shortcuts",
					"\t    var C = CryptoJS;",
					"\t    var C_lib = C.lib;",
					"\t    var BlockCipher = C_lib.BlockCipher;",
					"\t    var C_algo = C.algo;",
					"",
					"\t    // Lookup tables",
					"\t    var SBOX = [];",
					"\t    var INV_SBOX = [];",
					"\t    var SUB_MIX_0 = [];",
					"\t    var SUB_MIX_1 = [];",
					"\t    var SUB_MIX_2 = [];",
					"\t    var SUB_MIX_3 = [];",
					"\t    var INV_SUB_MIX_0 = [];",
					"\t    var INV_SUB_MIX_1 = [];",
					"\t    var INV_SUB_MIX_2 = [];",
					"\t    var INV_SUB_MIX_3 = [];",
					"",
					"\t    // Compute lookup tables",
					"\t    (function () {",
					"\t        // Compute double table",
					"\t        var d = [];",
					"\t        for (var i = 0; i < 256; i++) {",
					"\t            if (i < 128) {",
					"\t                d[i] = i << 1;",
					"\t            } else {",
					"\t                d[i] = (i << 1) ^ 0x11b;",
					"\t            }",
					"\t        }",
					"",
					"\t        // Walk GF(2^8)",
					"\t        var x = 0;",
					"\t        var xi = 0;",
					"\t        for (var i = 0; i < 256; i++) {",
					"\t            // Compute sbox",
					"\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);",
					"\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;",
					"\t            SBOX[x] = sx;",
					"\t            INV_SBOX[sx] = x;",
					"",
					"\t            // Compute multiplication",
					"\t            var x2 = d[x];",
					"\t            var x4 = d[x2];",
					"\t            var x8 = d[x4];",
					"",
					"\t            // Compute sub bytes, mix columns tables",
					"\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);",
					"\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);",
					"\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);",
					"\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);",
					"\t            SUB_MIX_3[x] = t;",
					"",
					"\t            // Compute inv sub bytes, inv mix columns tables",
					"\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);",
					"\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);",
					"\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);",
					"\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);",
					"\t            INV_SUB_MIX_3[sx] = t;",
					"",
					"\t            // Compute next counter",
					"\t            if (!x) {",
					"\t                x = xi = 1;",
					"\t            } else {",
					"\t                x = x2 ^ d[d[d[x8 ^ x2]]];",
					"\t                xi ^= d[d[xi]];",
					"\t            }",
					"\t        }",
					"\t    }());",
					"",
					"\t    // Precomputed Rcon lookup",
					"\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];",
					"",
					"\t    /**",
					"\t     * AES block cipher algorithm.",
					"\t     */",
					"\t    var AES = C_algo.AES = BlockCipher.extend({",
					"\t        _doReset: function () {",
					"\t            // Skip reset of nRounds has been set before and key did not change",
					"\t            if (this._nRounds && this._keyPriorReset === this._key) {",
					"\t                return;",
					"\t            }",
					"",
					"\t            // Shortcuts",
					"\t            var key = this._keyPriorReset = this._key;",
					"\t            var keyWords = key.words;",
					"\t            var keySize = key.sigBytes / 4;",
					"",
					"\t            // Compute number of rounds",
					"\t            var nRounds = this._nRounds = keySize + 6;",
					"",
					"\t            // Compute number of key schedule rows",
					"\t            var ksRows = (nRounds + 1) * 4;",
					"",
					"\t            // Compute key schedule",
					"\t            var keySchedule = this._keySchedule = [];",
					"\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {",
					"\t                if (ksRow < keySize) {",
					"\t                    keySchedule[ksRow] = keyWords[ksRow];",
					"\t                } else {",
					"\t                    var t = keySchedule[ksRow - 1];",
					"",
					"\t                    if (!(ksRow % keySize)) {",
					"\t                        // Rot word",
					"\t                        t = (t << 8) | (t >>> 24);",
					"",
					"\t                        // Sub word",
					"\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];",
					"",
					"\t                        // Mix Rcon",
					"\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;",
					"\t                    } else if (keySize > 6 && ksRow % keySize == 4) {",
					"\t                        // Sub word",
					"\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];",
					"\t                    }",
					"",
					"\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;",
					"\t                }",
					"\t            }",
					"",
					"\t            // Compute inv key schedule",
					"\t            var invKeySchedule = this._invKeySchedule = [];",
					"\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {",
					"\t                var ksRow = ksRows - invKsRow;",
					"",
					"\t                if (invKsRow % 4) {",
					"\t                    var t = keySchedule[ksRow];",
					"\t                } else {",
					"\t                    var t = keySchedule[ksRow - 4];",
					"\t                }",
					"",
					"\t                if (invKsRow < 4 || ksRow <= 4) {",
					"\t                    invKeySchedule[invKsRow] = t;",
					"\t                } else {",
					"\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^",
					"\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];",
					"\t                }",
					"\t            }",
					"\t        },",
					"",
					"\t        encryptBlock: function (M, offset) {",
					"\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);",
					"\t        },",
					"",
					"\t        decryptBlock: function (M, offset) {",
					"\t            // Swap 2nd and 4th rows",
					"\t            var t = M[offset + 1];",
					"\t            M[offset + 1] = M[offset + 3];",
					"\t            M[offset + 3] = t;",
					"",
					"\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);",
					"",
					"\t            // Inv swap 2nd and 4th rows",
					"\t            var t = M[offset + 1];",
					"\t            M[offset + 1] = M[offset + 3];",
					"\t            M[offset + 3] = t;",
					"\t        },",
					"",
					"\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {",
					"\t            // Shortcut",
					"\t            var nRounds = this._nRounds;",
					"",
					"\t            // Get input, add round key",
					"\t            var s0 = M[offset]     ^ keySchedule[0];",
					"\t            var s1 = M[offset + 1] ^ keySchedule[1];",
					"\t            var s2 = M[offset + 2] ^ keySchedule[2];",
					"\t            var s3 = M[offset + 3] ^ keySchedule[3];",
					"",
					"\t            // Key schedule row counter",
					"\t            var ksRow = 4;",
					"",
					"\t            // Rounds",
					"\t            for (var round = 1; round < nRounds; round++) {",
					"\t                // Shift rows, sub bytes, mix columns, add round key",
					"\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];",
					"\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];",
					"\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];",
					"\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];",
					"",
					"\t                // Update state",
					"\t                s0 = t0;",
					"\t                s1 = t1;",
					"\t                s2 = t2;",
					"\t                s3 = t3;",
					"\t            }",
					"",
					"\t            // Shift rows, sub bytes, add round key",
					"\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];",
					"\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];",
					"\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];",
					"\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];",
					"",
					"\t            // Set output",
					"\t            M[offset]     = t0;",
					"\t            M[offset + 1] = t1;",
					"\t            M[offset + 2] = t2;",
					"\t            M[offset + 3] = t3;",
					"\t        },",
					"",
					"\t        keySize: 256/32",
					"\t    });",
					"",
					"\t    /**",
					"\t     * Shortcut functions to the cipher's object interface.",
					"\t     *",
					"\t     * @example",
					"\t     *",
					"\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);",
					"\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);",
					"\t     */",
					"\t    C.AES = BlockCipher._createHelper(AES);",
					"\t}());",
					"",
					"",
					"\treturn CryptoJS.AES;",
					"",
					"}));",
					"",
					"/***/ }),",
					"/* 4 */",
					"/***/ (function(module, exports, __webpack_require__) {",
					"",
					";(function (root, factory) {",
					"\tif (true) {",
					"\t\t// CommonJS",
					"\t\tmodule.exports = exports = factory();",
					"\t}",
					"\telse {}",
					"}(this, function () {",
					"",
					"\t/**",
					"\t * CryptoJS core components.",
					"\t */",
					"\tvar CryptoJS = CryptoJS || (function (Math, undefined) {",
					"\t    /*",
					"\t     * Local polyfil of Object.create",
					"\t     */",
					"\t    var create = Object.create || (function () {",
					"\t        function F() {};",
					"",
					"\t        return function (obj) {",
					"\t            var subtype;",
					"",
					"\t            F.prototype = obj;",
					"",
					"\t            subtype = new F();",
					"",
					"\t            F.prototype = null;",
					"",
					"\t            return subtype;",
					"\t        };",
					"\t    }())",
					"",
					"\t    /**",
					"\t     * CryptoJS namespace.",
					"\t     */",
					"\t    var C = {};",
					"",
					"\t    /**",
					"\t     * Library namespace.",
					"\t     */",
					"\t    var C_lib = C.lib = {};",
					"",
					"\t    /**",
					"\t     * Base object for prototypal inheritance.",
					"\t     */",
					"\t    var Base = C_lib.Base = (function () {",
					"",
					"",
					"\t        return {",
					"\t            /**",
					"\t             * Creates a new object that inherits from this object.",
					"\t             *",
					"\t             * @param {Object} overrides Properties to copy into the new object.",
					"\t             *",
					"\t             * @return {Object} The new object.",
					"\t             *",
					"\t             * @static",
					"\t             *",
					"\t             * @example",
					"\t             *",
					"\t             *     var MyType = CryptoJS.lib.Base.extend({",
					"\t             *         field: 'value',",
					"\t             *",
					"\t             *         method: function () {",
					"\t             *         }",
					"\t             *     });",
					"\t             */",
					"\t            extend: function (overrides) {",
					"\t                // Spawn",
					"\t                var subtype = create(this);",
					"",
					"\t                // Augment",
					"\t                if (overrides) {",
					"\t                    subtype.mixIn(overrides);",
					"\t                }",
					"",
					"\t                // Create default initializer",
					"\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {",
					"\t                    subtype.init = function () {",
					"\t                        subtype.$super.init.apply(this, arguments);",
					"\t                    };",
					"\t                }",
					"",
					"\t                // Initializer's prototype is the subtype object",
					"\t                subtype.init.prototype = subtype;",
					"",
					"\t                // Reference supertype",
					"\t                subtype.$super = this;",
					"",
					"\t                return subtype;",
					"\t            },",
					"",
					"\t            /**",
					"\t             * Extends this object and runs the init method.",
					"\t             * Arguments to create() will be passed to init().",
					"\t             *",
					"\t             * @return {Object} The new object.",
					"\t             *",
					"\t             * @static",
					"\t             *",
					"\t             * @example",
					"\t             *",
					"\t             *     var instance = MyType.create();",
					"\t             */",
					"\t            create: function () {",
					"\t                var instance = this.extend();",
					"\t                instance.init.apply(instance, arguments);",
					"",
					"\t                return instance;",
					"\t            },",
					"",
					"\t            /**",
					"\t             * Initializes a newly created object.",
					"\t             * Override this method to add some logic when your objects are created.",
					"\t             *",
					"\t             * @example",
					"\t             *",
					"\t             *     var MyType = CryptoJS.lib.Base.extend({",
					"\t             *         init: function () {",
					"\t             *             // ...",
					"\t             *         }",
					"\t             *     });",
					"\t             */",
					"\t            init: function () {",
					"\t            },",
					"",
					"\t            /**",
					"\t             * Copies properties into this object.",
					"\t             *",
					"\t             * @param {Object} properties The properties to mix in.",
					"\t             *",
					"\t             * @example",
					"\t             *",
					"\t             *     MyType.mixIn({",
					"\t             *         field: 'value'",
					"\t             *     });",
					"\t             */",
					"\t            mixIn: function (properties) {",
					"\t                for (var propertyName in properties) {",
					"\t                    if (properties.hasOwnProperty(propertyName)) {",
					"\t                        this[propertyName] = properties[propertyName];",
					"\t                    }",
					"\t                }",
					"",
					"\t                // IE won't copy toString using the loop above",
					"\t                if (properties.hasOwnProperty('toString')) {",
					"\t                    this.toString = properties.toString;",
					"\t                }",
					"\t            },",
					"",
					"\t            /**",
					"\t             * Creates a copy of this object.",
					"\t             *",
					"\t             * @return {Object} The clone.",
					"\t             *",
					"\t             * @example",
					"\t             *",
					"\t             *     var clone = instance.clone();",
					"\t             */",
					"\t            clone: function () {",
					"\t                return this.init.prototype.extend(this);",
					"\t            }",
					"\t        };",
					"\t    }());",
					"",
					"\t    /**",
					"\t     * An array of 32-bit words.",
					"\t     *",
					"\t     * @property {Array} words The array of 32-bit words.",
					"\t     * @property {number} sigBytes The number of significant bytes in this word array.",
					"\t     */",
					"\t    var WordArray = C_lib.WordArray = Base.extend({",
					"\t        /**",
					"\t         * Initializes a newly created word array.",
					"\t         *",
					"\t         * @param {Array} words (Optional) An array of 32-bit words.",
					"\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var wordArray = CryptoJS.lib.WordArray.create();",
					"\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);",
					"\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);",
					"\t         */",
					"\t        init: function (words, sigBytes) {",
					"\t            words = this.words = words || [];",
					"",
					"\t            if (sigBytes != undefined) {",
					"\t                this.sigBytes = sigBytes;",
					"\t            } else {",
					"\t                this.sigBytes = words.length * 4;",
					"\t            }",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Converts this word array to a string.",
					"\t         *",
					"\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex",
					"\t         *",
					"\t         * @return {string} The stringified word array.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var string = wordArray + '';",
					"\t         *     var string = wordArray.toString();",
					"\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);",
					"\t         */",
					"\t        toString: function (encoder) {",
					"\t            return (encoder || Hex).stringify(this);",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Concatenates a word array to this word array.",
					"\t         *",
					"\t         * @param {WordArray} wordArray The word array to append.",
					"\t         *",
					"\t         * @return {WordArray} This word array.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     wordArray1.concat(wordArray2);",
					"\t         */",
					"\t        concat: function (wordArray) {",
					"\t            // Shortcuts",
					"\t            var thisWords = this.words;",
					"\t            var thatWords = wordArray.words;",
					"\t            var thisSigBytes = this.sigBytes;",
					"\t            var thatSigBytes = wordArray.sigBytes;",
					"",
					"\t            // Clamp excess bits",
					"\t            this.clamp();",
					"",
					"\t            // Concat",
					"\t            if (thisSigBytes % 4) {",
					"\t                // Copy one byte at a time",
					"\t                for (var i = 0; i < thatSigBytes; i++) {",
					"\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;",
					"\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);",
					"\t                }",
					"\t            } else {",
					"\t                // Copy one word at a time",
					"\t                for (var i = 0; i < thatSigBytes; i += 4) {",
					"\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];",
					"\t                }",
					"\t            }",
					"\t            this.sigBytes += thatSigBytes;",
					"",
					"\t            // Chainable",
					"\t            return this;",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Removes insignificant bits.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     wordArray.clamp();",
					"\t         */",
					"\t        clamp: function () {",
					"\t            // Shortcuts",
					"\t            var words = this.words;",
					"\t            var sigBytes = this.sigBytes;",
					"",
					"\t            // Clamp",
					"\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);",
					"\t            words.length = Math.ceil(sigBytes / 4);",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Creates a copy of this word array.",
					"\t         *",
					"\t         * @return {WordArray} The clone.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var clone = wordArray.clone();",
					"\t         */",
					"\t        clone: function () {",
					"\t            var clone = Base.clone.call(this);",
					"\t            clone.words = this.words.slice(0);",
					"",
					"\t            return clone;",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Creates a word array filled with random bytes.",
					"\t         *",
					"\t         * @param {number} nBytes The number of random bytes to generate.",
					"\t         *",
					"\t         * @return {WordArray} The random word array.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);",
					"\t         */",
					"\t        random: function (nBytes) {",
					"\t            var words = [];",
					"",
					"\t            var r = (function (m_w) {",
					"\t                var m_w = m_w;",
					"\t                var m_z = 0x3ade68b1;",
					"\t                var mask = 0xffffffff;",
					"",
					"\t                return function () {",
					"\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;",
					"\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;",
					"\t                    var result = ((m_z << 0x10) + m_w) & mask;",
					"\t                    result /= 0x100000000;",
					"\t                    result += 0.5;",
					"\t                    return result * (Math.random() > .5 ? 1 : -1);",
					"\t                }",
					"\t            });",
					"",
					"\t            for (var i = 0, rcache; i < nBytes; i += 4) {",
					"\t                var _r = r((rcache || Math.random()) * 0x100000000);",
					"",
					"\t                rcache = _r() * 0x3ade67b7;",
					"\t                words.push((_r() * 0x100000000) | 0);",
					"\t            }",
					"",
					"\t            return new WordArray.init(words, nBytes);",
					"\t        }",
					"\t    });",
					"",
					"\t    /**",
					"\t     * Encoder namespace.",
					"\t     */",
					"\t    var C_enc = C.enc = {};",
					"",
					"\t    /**",
					"\t     * Hex encoding strategy.",
					"\t     */",
					"\t    var Hex = C_enc.Hex = {",
					"\t        /**",
					"\t         * Converts a word array to a hex string.",
					"\t         *",
					"\t         * @param {WordArray} wordArray The word array.",
					"\t         *",
					"\t         * @return {string} The hex string.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);",
					"\t         */",
					"\t        stringify: function (wordArray) {",
					"\t            // Shortcuts",
					"\t            var words = wordArray.words;",
					"\t            var sigBytes = wordArray.sigBytes;",
					"",
					"\t            // Convert",
					"\t            var hexChars = [];",
					"\t            for (var i = 0; i < sigBytes; i++) {",
					"\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;",
					"\t                hexChars.push((bite >>> 4).toString(16));",
					"\t                hexChars.push((bite & 0x0f).toString(16));",
					"\t            }",
					"",
					"\t            return hexChars.join('');",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Converts a hex string to a word array.",
					"\t         *",
					"\t         * @param {string} hexStr The hex string.",
					"\t         *",
					"\t         * @return {WordArray} The word array.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);",
					"\t         */",
					"\t        parse: function (hexStr) {",
					"\t            // Shortcut",
					"\t            var hexStrLength = hexStr.length;",
					"",
					"\t            // Convert",
					"\t            var words = [];",
					"\t            for (var i = 0; i < hexStrLength; i += 2) {",
					"\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);",
					"\t            }",
					"",
					"\t            return new WordArray.init(words, hexStrLength / 2);",
					"\t        }",
					"\t    };",
					"",
					"\t    /**",
					"\t     * Latin1 encoding strategy.",
					"\t     */",
					"\t    var Latin1 = C_enc.Latin1 = {",
					"\t        /**",
					"\t         * Converts a word array to a Latin1 string.",
					"\t         *",
					"\t         * @param {WordArray} wordArray The word array.",
					"\t         *",
					"\t         * @return {string} The Latin1 string.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);",
					"\t         */",
					"\t        stringify: function (wordArray) {",
					"\t            // Shortcuts",
					"\t            var words = wordArray.words;",
					"\t            var sigBytes = wordArray.sigBytes;",
					"",
					"\t            // Convert",
					"\t            var latin1Chars = [];",
					"\t            for (var i = 0; i < sigBytes; i++) {",
					"\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;",
					"\t                latin1Chars.push(String.fromCharCode(bite));",
					"\t            }",
					"",
					"\t            return latin1Chars.join('');",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Converts a Latin1 string to a word array.",
					"\t         *",
					"\t         * @param {string} latin1Str The Latin1 string.",
					"\t         *",
					"\t         * @return {WordArray} The word array.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);",
					"\t         */",
					"\t        parse: function (latin1Str) {",
					"\t            // Shortcut",
					"\t            var latin1StrLength = latin1Str.length;",
					"",
					"\t            // Convert",
					"\t            var words = [];",
					"\t            for (var i = 0; i < latin1StrLength; i++) {",
					"\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);",
					"\t            }",
					"",
					"\t            return new WordArray.init(words, latin1StrLength);",
					"\t        }",
					"\t    };",
					"",
					"\t    /**",
					"\t     * UTF-8 encoding strategy.",
					"\t     */",
					"\t    var Utf8 = C_enc.Utf8 = {",
					"\t        /**",
					"\t         * Converts a word array to a UTF-8 string.",
					"\t         *",
					"\t         * @param {WordArray} wordArray The word array.",
					"\t         *",
					"\t         * @return {string} The UTF-8 string.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);",
					"\t         */",
					"\t        stringify: function (wordArray) {",
					"\t            try {",
					"\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));",
					"\t            } catch (e) {",
					"\t                throw new Error('Malformed UTF-8 data');",
					"\t            }",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Converts a UTF-8 string to a word array.",
					"\t         *",
					"\t         * @param {string} utf8Str The UTF-8 string.",
					"\t         *",
					"\t         * @return {WordArray} The word array.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);",
					"\t         */",
					"\t        parse: function (utf8Str) {",
					"\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));",
					"\t        }",
					"\t    };",
					"",
					"\t    /**",
					"\t     * Abstract buffered block algorithm template.",
					"\t     *",
					"\t     * The property blockSize must be implemented in a concrete subtype.",
					"\t     *",
					"\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0",
					"\t     */",
					"\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({",
					"\t        /**",
					"\t         * Resets this block algorithm's data buffer to its initial state.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     bufferedBlockAlgorithm.reset();",
					"\t         */",
					"\t        reset: function () {",
					"\t            // Initial values",
					"\t            this._data = new WordArray.init();",
					"\t            this._nDataBytes = 0;",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Adds new data to this block algorithm's buffer.",
					"\t         *",
					"\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     bufferedBlockAlgorithm._append('data');",
					"\t         *     bufferedBlockAlgorithm._append(wordArray);",
					"\t         */",
					"\t        _append: function (data) {",
					"\t            // Convert string to WordArray, else assume WordArray already",
					"\t            if (typeof data == 'string') {",
					"\t                data = Utf8.parse(data);",
					"\t            }",
					"",
					"\t            // Append",
					"\t            this._data.concat(data);",
					"\t            this._nDataBytes += data.sigBytes;",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Processes available data blocks.",
					"\t         *",
					"\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.",
					"\t         *",
					"\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.",
					"\t         *",
					"\t         * @return {WordArray} The processed data.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var processedData = bufferedBlockAlgorithm._process();",
					"\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');",
					"\t         */",
					"\t        _process: function (doFlush) {",
					"\t            // Shortcuts",
					"\t            var data = this._data;",
					"\t            var dataWords = data.words;",
					"\t            var dataSigBytes = data.sigBytes;",
					"\t            var blockSize = this.blockSize;",
					"\t            var blockSizeBytes = blockSize * 4;",
					"",
					"\t            // Count blocks ready",
					"\t            var nBlocksReady = dataSigBytes / blockSizeBytes;",
					"\t            if (doFlush) {",
					"\t                // Round up to include partial blocks",
					"\t                nBlocksReady = Math.ceil(nBlocksReady);",
					"\t            } else {",
					"\t                // Round down to include only full blocks,",
					"\t                // less the number of blocks that must remain in the buffer",
					"\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);",
					"\t            }",
					"",
					"\t            // Count words ready",
					"\t            var nWordsReady = nBlocksReady * blockSize;",
					"",
					"\t            // Count bytes ready",
					"\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);",
					"",
					"\t            // Process blocks",
					"\t            if (nWordsReady) {",
					"\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {",
					"\t                    // Perform concrete-algorithm logic",
					"\t                    this._doProcessBlock(dataWords, offset);",
					"\t                }",
					"",
					"\t                // Remove processed words",
					"\t                var processedWords = dataWords.splice(0, nWordsReady);",
					"\t                data.sigBytes -= nBytesReady;",
					"\t            }",
					"",
					"\t            // Return processed words",
					"\t            return new WordArray.init(processedWords, nBytesReady);",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Creates a copy of this object.",
					"\t         *",
					"\t         * @return {Object} The clone.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var clone = bufferedBlockAlgorithm.clone();",
					"\t         */",
					"\t        clone: function () {",
					"\t            var clone = Base.clone.call(this);",
					"\t            clone._data = this._data.clone();",
					"",
					"\t            return clone;",
					"\t        },",
					"",
					"\t        _minBufferSize: 0",
					"\t    });",
					"",
					"\t    /**",
					"\t     * Abstract hasher template.",
					"\t     *",
					"\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)",
					"\t     */",
					"\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({",
					"\t        /**",
					"\t         * Configuration options.",
					"\t         */",
					"\t        cfg: Base.extend(),",
					"",
					"\t        /**",
					"\t         * Initializes a newly created hasher.",
					"\t         *",
					"\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var hasher = CryptoJS.algo.SHA256.create();",
					"\t         */",
					"\t        init: function (cfg) {",
					"\t            // Apply config defaults",
					"\t            this.cfg = this.cfg.extend(cfg);",
					"",
					"\t            // Set initial values",
					"\t            this.reset();",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Resets this hasher to its initial state.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     hasher.reset();",
					"\t         */",
					"\t        reset: function () {",
					"\t            // Reset data buffer",
					"\t            BufferedBlockAlgorithm.reset.call(this);",
					"",
					"\t            // Perform concrete-hasher logic",
					"\t            this._doReset();",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Updates this hasher with a message.",
					"\t         *",
					"\t         * @param {WordArray|string} messageUpdate The message to append.",
					"\t         *",
					"\t         * @return {Hasher} This hasher.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     hasher.update('message');",
					"\t         *     hasher.update(wordArray);",
					"\t         */",
					"\t        update: function (messageUpdate) {",
					"\t            // Append",
					"\t            this._append(messageUpdate);",
					"",
					"\t            // Update the hash",
					"\t            this._process();",
					"",
					"\t            // Chainable",
					"\t            return this;",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Finalizes the hash computation.",
					"\t         * Note that the finalize operation is effectively a destructive, read-once operation.",
					"\t         *",
					"\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.",
					"\t         *",
					"\t         * @return {WordArray} The hash.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var hash = hasher.finalize();",
					"\t         *     var hash = hasher.finalize('message');",
					"\t         *     var hash = hasher.finalize(wordArray);",
					"\t         */",
					"\t        finalize: function (messageUpdate) {",
					"\t            // Final message update",
					"\t            if (messageUpdate) {",
					"\t                this._append(messageUpdate);",
					"\t            }",
					"",
					"\t            // Perform concrete-hasher logic",
					"\t            var hash = this._doFinalize();",
					"",
					"\t            return hash;",
					"\t        },",
					"",
					"\t        blockSize: 512/32,",
					"",
					"\t        /**",
					"\t         * Creates a shortcut function to a hasher's object interface.",
					"\t         *",
					"\t         * @param {Hasher} hasher The hasher to create a helper for.",
					"\t         *",
					"\t         * @return {Function} The shortcut function.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);",
					"\t         */",
					"\t        _createHelper: function (hasher) {",
					"\t            return function (message, cfg) {",
					"\t                return new hasher.init(cfg).finalize(message);",
					"\t            };",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Creates a shortcut function to the HMAC's object interface.",
					"\t         *",
					"\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.",
					"\t         *",
					"\t         * @return {Function} The shortcut function.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);",
					"\t         */",
					"\t        _createHmacHelper: function (hasher) {",
					"\t            return function (message, key) {",
					"\t                return new C_algo.HMAC.init(hasher, key).finalize(message);",
					"\t            };",
					"\t        }",
					"\t    });",
					"",
					"\t    /**",
					"\t     * Algorithm namespace.",
					"\t     */",
					"\t    var C_algo = C.algo = {};",
					"",
					"\t    return C;",
					"\t}(Math));",
					"",
					"",
					"\treturn CryptoJS;",
					"",
					"}));",
					"",
					"/***/ }),",
					"/* 5 */",
					"/***/ (function(module, exports, __webpack_require__) {",
					"",
					";(function (root, factory) {",
					"\tif (true) {",
					"\t\t// CommonJS",
					"\t\tmodule.exports = exports = factory(__webpack_require__(4));",
					"\t}",
					"\telse {}",
					"}(this, function (CryptoJS) {",
					"",
					"\t(function () {",
					"\t    // Shortcuts",
					"\t    var C = CryptoJS;",
					"\t    var C_lib = C.lib;",
					"\t    var WordArray = C_lib.WordArray;",
					"\t    var C_enc = C.enc;",
					"",
					"\t    /**",
					"\t     * Base64 encoding strategy.",
					"\t     */",
					"\t    var Base64 = C_enc.Base64 = {",
					"\t        /**",
					"\t         * Converts a word array to a Base64 string.",
					"\t         *",
					"\t         * @param {WordArray} wordArray The word array.",
					"\t         *",
					"\t         * @return {string} The Base64 string.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);",
					"\t         */",
					"\t        stringify: function (wordArray) {",
					"\t            // Shortcuts",
					"\t            var words = wordArray.words;",
					"\t            var sigBytes = wordArray.sigBytes;",
					"\t            var map = this._map;",
					"",
					"\t            // Clamp excess bits",
					"\t            wordArray.clamp();",
					"",
					"\t            // Convert",
					"\t            var base64Chars = [];",
					"\t            for (var i = 0; i < sigBytes; i += 3) {",
					"\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;",
					"\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;",
					"\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;",
					"",
					"\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;",
					"",
					"\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {",
					"\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));",
					"\t                }",
					"\t            }",
					"",
					"\t            // Add padding",
					"\t            var paddingChar = map.charAt(64);",
					"\t            if (paddingChar) {",
					"\t                while (base64Chars.length % 4) {",
					"\t                    base64Chars.push(paddingChar);",
					"\t                }",
					"\t            }",
					"",
					"\t            return base64Chars.join('');",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Converts a Base64 string to a word array.",
					"\t         *",
					"\t         * @param {string} base64Str The Base64 string.",
					"\t         *",
					"\t         * @return {WordArray} The word array.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);",
					"\t         */",
					"\t        parse: function (base64Str) {",
					"\t            // Shortcuts",
					"\t            var base64StrLength = base64Str.length;",
					"\t            var map = this._map;",
					"\t            var reverseMap = this._reverseMap;",
					"",
					"\t            if (!reverseMap) {",
					"\t                    reverseMap = this._reverseMap = [];",
					"\t                    for (var j = 0; j < map.length; j++) {",
					"\t                        reverseMap[map.charCodeAt(j)] = j;",
					"\t                    }",
					"\t            }",
					"",
					"\t            // Ignore padding",
					"\t            var paddingChar = map.charAt(64);",
					"\t            if (paddingChar) {",
					"\t                var paddingIndex = base64Str.indexOf(paddingChar);",
					"\t                if (paddingIndex !== -1) {",
					"\t                    base64StrLength = paddingIndex;",
					"\t                }",
					"\t            }",
					"",
					"\t            // Convert",
					"\t            return parseLoop(base64Str, base64StrLength, reverseMap);",
					"",
					"\t        },",
					"",
					"\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='",
					"\t    };",
					"",
					"\t    function parseLoop(base64Str, base64StrLength, reverseMap) {",
					"\t      var words = [];",
					"\t      var nBytes = 0;",
					"\t      for (var i = 0; i < base64StrLength; i++) {",
					"\t          if (i % 4) {",
					"\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);",
					"\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);",
					"\t              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);",
					"\t              nBytes++;",
					"\t          }",
					"\t      }",
					"\t      return WordArray.create(words, nBytes);",
					"\t    }",
					"\t}());",
					"",
					"",
					"\treturn CryptoJS.enc.Base64;",
					"",
					"}));",
					"",
					"/***/ }),",
					"/* 6 */",
					"/***/ (function(module, exports, __webpack_require__) {",
					"",
					";(function (root, factory) {",
					"\tif (true) {",
					"\t\t// CommonJS",
					"\t\tmodule.exports = exports = factory(__webpack_require__(4));",
					"\t}",
					"\telse {}",
					"}(this, function (CryptoJS) {",
					"",
					"\t(function (Math) {",
					"\t    // Shortcuts",
					"\t    var C = CryptoJS;",
					"\t    var C_lib = C.lib;",
					"\t    var WordArray = C_lib.WordArray;",
					"\t    var Hasher = C_lib.Hasher;",
					"\t    var C_algo = C.algo;",
					"",
					"\t    // Constants table",
					"\t    var T = [];",
					"",
					"\t    // Compute constants",
					"\t    (function () {",
					"\t        for (var i = 0; i < 64; i++) {",
					"\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;",
					"\t        }",
					"\t    }());",
					"",
					"\t    /**",
					"\t     * MD5 hash algorithm.",
					"\t     */",
					"\t    var MD5 = C_algo.MD5 = Hasher.extend({",
					"\t        _doReset: function () {",
					"\t            this._hash = new WordArray.init([",
					"\t                0x67452301, 0xefcdab89,",
					"\t                0x98badcfe, 0x10325476",
					"\t            ]);",
					"\t        },",
					"",
					"\t        _doProcessBlock: function (M, offset) {",
					"\t            // Swap endian",
					"\t            for (var i = 0; i < 16; i++) {",
					"\t                // Shortcuts",
					"\t                var offset_i = offset + i;",
					"\t                var M_offset_i = M[offset_i];",
					"",
					"\t                M[offset_i] = (",
					"\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |",
					"\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)",
					"\t                );",
					"\t            }",
					"",
					"\t            // Shortcuts",
					"\t            var H = this._hash.words;",
					"",
					"\t            var M_offset_0  = M[offset + 0];",
					"\t            var M_offset_1  = M[offset + 1];",
					"\t            var M_offset_2  = M[offset + 2];",
					"\t            var M_offset_3  = M[offset + 3];",
					"\t            var M_offset_4  = M[offset + 4];",
					"\t            var M_offset_5  = M[offset + 5];",
					"\t            var M_offset_6  = M[offset + 6];",
					"\t            var M_offset_7  = M[offset + 7];",
					"\t            var M_offset_8  = M[offset + 8];",
					"\t            var M_offset_9  = M[offset + 9];",
					"\t            var M_offset_10 = M[offset + 10];",
					"\t            var M_offset_11 = M[offset + 11];",
					"\t            var M_offset_12 = M[offset + 12];",
					"\t            var M_offset_13 = M[offset + 13];",
					"\t            var M_offset_14 = M[offset + 14];",
					"\t            var M_offset_15 = M[offset + 15];",
					"",
					"\t            // Working varialbes",
					"\t            var a = H[0];",
					"\t            var b = H[1];",
					"\t            var c = H[2];",
					"\t            var d = H[3];",
					"",
					"\t            // Computation",
					"\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);",
					"\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);",
					"\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);",
					"\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);",
					"\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);",
					"\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);",
					"\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);",
					"\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);",
					"\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);",
					"\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);",
					"\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);",
					"\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);",
					"\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);",
					"\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);",
					"\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);",
					"\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);",
					"",
					"\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);",
					"\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);",
					"\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);",
					"\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);",
					"\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);",
					"\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);",
					"\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);",
					"\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);",
					"\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);",
					"\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);",
					"\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);",
					"\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);",
					"\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);",
					"\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);",
					"\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);",
					"\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);",
					"",
					"\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);",
					"\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);",
					"\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);",
					"\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);",
					"\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);",
					"\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);",
					"\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);",
					"\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);",
					"\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);",
					"\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);",
					"\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);",
					"\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);",
					"\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);",
					"\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);",
					"\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);",
					"\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);",
					"",
					"\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);",
					"\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);",
					"\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);",
					"\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);",
					"\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);",
					"\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);",
					"\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);",
					"\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);",
					"\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);",
					"\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);",
					"\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);",
					"\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);",
					"\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);",
					"\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);",
					"\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);",
					"\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);",
					"",
					"\t            // Intermediate hash value",
					"\t            H[0] = (H[0] + a) | 0;",
					"\t            H[1] = (H[1] + b) | 0;",
					"\t            H[2] = (H[2] + c) | 0;",
					"\t            H[3] = (H[3] + d) | 0;",
					"\t        },",
					"",
					"\t        _doFinalize: function () {",
					"\t            // Shortcuts",
					"\t            var data = this._data;",
					"\t            var dataWords = data.words;",
					"",
					"\t            var nBitsTotal = this._nDataBytes * 8;",
					"\t            var nBitsLeft = data.sigBytes * 8;",
					"",
					"\t            // Add padding",
					"\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);",
					"",
					"\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);",
					"\t            var nBitsTotalL = nBitsTotal;",
					"\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (",
					"\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |",
					"\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)",
					"\t            );",
					"\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (",
					"\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |",
					"\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)",
					"\t            );",
					"",
					"\t            data.sigBytes = (dataWords.length + 1) * 4;",
					"",
					"\t            // Hash final blocks",
					"\t            this._process();",
					"",
					"\t            // Shortcuts",
					"\t            var hash = this._hash;",
					"\t            var H = hash.words;",
					"",
					"\t            // Swap endian",
					"\t            for (var i = 0; i < 4; i++) {",
					"\t                // Shortcut",
					"\t                var H_i = H[i];",
					"",
					"\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |",
					"\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);",
					"\t            }",
					"",
					"\t            // Return final computed hash",
					"\t            return hash;",
					"\t        },",
					"",
					"\t        clone: function () {",
					"\t            var clone = Hasher.clone.call(this);",
					"\t            clone._hash = this._hash.clone();",
					"",
					"\t            return clone;",
					"\t        }",
					"\t    });",
					"",
					"\t    function FF(a, b, c, d, x, s, t) {",
					"\t        var n = a + ((b & c) | (~b & d)) + x + t;",
					"\t        return ((n << s) | (n >>> (32 - s))) + b;",
					"\t    }",
					"",
					"\t    function GG(a, b, c, d, x, s, t) {",
					"\t        var n = a + ((b & d) | (c & ~d)) + x + t;",
					"\t        return ((n << s) | (n >>> (32 - s))) + b;",
					"\t    }",
					"",
					"\t    function HH(a, b, c, d, x, s, t) {",
					"\t        var n = a + (b ^ c ^ d) + x + t;",
					"\t        return ((n << s) | (n >>> (32 - s))) + b;",
					"\t    }",
					"",
					"\t    function II(a, b, c, d, x, s, t) {",
					"\t        var n = a + (c ^ (b | ~d)) + x + t;",
					"\t        return ((n << s) | (n >>> (32 - s))) + b;",
					"\t    }",
					"",
					"\t    /**",
					"\t     * Shortcut function to the hasher's object interface.",
					"\t     *",
					"\t     * @param {WordArray|string} message The message to hash.",
					"\t     *",
					"\t     * @return {WordArray} The hash.",
					"\t     *",
					"\t     * @static",
					"\t     *",
					"\t     * @example",
					"\t     *",
					"\t     *     var hash = CryptoJS.MD5('message');",
					"\t     *     var hash = CryptoJS.MD5(wordArray);",
					"\t     */",
					"\t    C.MD5 = Hasher._createHelper(MD5);",
					"",
					"\t    /**",
					"\t     * Shortcut function to the HMAC's object interface.",
					"\t     *",
					"\t     * @param {WordArray|string} message The message to hash.",
					"\t     * @param {WordArray|string} key The secret key.",
					"\t     *",
					"\t     * @return {WordArray} The HMAC.",
					"\t     *",
					"\t     * @static",
					"\t     *",
					"\t     * @example",
					"\t     *",
					"\t     *     var hmac = CryptoJS.HmacMD5(message, key);",
					"\t     */",
					"\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);",
					"\t}(Math));",
					"",
					"",
					"\treturn CryptoJS.MD5;",
					"",
					"}));",
					"",
					"/***/ }),",
					"/* 7 */",
					"/***/ (function(module, exports, __webpack_require__) {",
					"",
					";(function (root, factory, undef) {",
					"\tif (true) {",
					"\t\t// CommonJS",
					"\t\tmodule.exports = exports = factory(__webpack_require__(4), __webpack_require__(8), __webpack_require__(9));",
					"\t}",
					"\telse {}",
					"}(this, function (CryptoJS) {",
					"",
					"\t(function () {",
					"\t    // Shortcuts",
					"\t    var C = CryptoJS;",
					"\t    var C_lib = C.lib;",
					"\t    var Base = C_lib.Base;",
					"\t    var WordArray = C_lib.WordArray;",
					"\t    var C_algo = C.algo;",
					"\t    var MD5 = C_algo.MD5;",
					"",
					"\t    /**",
					"\t     * This key derivation function is meant to conform with EVP_BytesToKey.",
					"\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html",
					"\t     */",
					"\t    var EvpKDF = C_algo.EvpKDF = Base.extend({",
					"\t        /**",
					"\t         * Configuration options.",
					"\t         *",
					"\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)",
					"\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5",
					"\t         * @property {number} iterations The number of iterations to perform. Default: 1",
					"\t         */",
					"\t        cfg: Base.extend({",
					"\t            keySize: 128/32,",
					"\t            hasher: MD5,",
					"\t            iterations: 1",
					"\t        }),",
					"",
					"\t        /**",
					"\t         * Initializes a newly created key derivation function.",
					"\t         *",
					"\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var kdf = CryptoJS.algo.EvpKDF.create();",
					"\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });",
					"\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });",
					"\t         */",
					"\t        init: function (cfg) {",
					"\t            this.cfg = this.cfg.extend(cfg);",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Derives a key from a password.",
					"\t         *",
					"\t         * @param {WordArray|string} password The password.",
					"\t         * @param {WordArray|string} salt A salt.",
					"\t         *",
					"\t         * @return {WordArray} The derived key.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var key = kdf.compute(password, salt);",
					"\t         */",
					"\t        compute: function (password, salt) {",
					"\t            // Shortcut",
					"\t            var cfg = this.cfg;",
					"",
					"\t            // Init hasher",
					"\t            var hasher = cfg.hasher.create();",
					"",
					"\t            // Initial values",
					"\t            var derivedKey = WordArray.create();",
					"",
					"\t            // Shortcuts",
					"\t            var derivedKeyWords = derivedKey.words;",
					"\t            var keySize = cfg.keySize;",
					"\t            var iterations = cfg.iterations;",
					"",
					"\t            // Generate key",
					"\t            while (derivedKeyWords.length < keySize) {",
					"\t                if (block) {",
					"\t                    hasher.update(block);",
					"\t                }",
					"\t                var block = hasher.update(password).finalize(salt);",
					"\t                hasher.reset();",
					"",
					"\t                // Iterations",
					"\t                for (var i = 1; i < iterations; i++) {",
					"\t                    block = hasher.finalize(block);",
					"\t                    hasher.reset();",
					"\t                }",
					"",
					"\t                derivedKey.concat(block);",
					"\t            }",
					"\t            derivedKey.sigBytes = keySize * 4;",
					"",
					"\t            return derivedKey;",
					"\t        }",
					"\t    });",
					"",
					"\t    /**",
					"\t     * Derives a key from a password.",
					"\t     *",
					"\t     * @param {WordArray|string} password The password.",
					"\t     * @param {WordArray|string} salt A salt.",
					"\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.",
					"\t     *",
					"\t     * @return {WordArray} The derived key.",
					"\t     *",
					"\t     * @static",
					"\t     *",
					"\t     * @example",
					"\t     *",
					"\t     *     var key = CryptoJS.EvpKDF(password, salt);",
					"\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });",
					"\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });",
					"\t     */",
					"\t    C.EvpKDF = function (password, salt, cfg) {",
					"\t        return EvpKDF.create(cfg).compute(password, salt);",
					"\t    };",
					"\t}());",
					"",
					"",
					"\treturn CryptoJS.EvpKDF;",
					"",
					"}));",
					"",
					"/***/ }),",
					"/* 8 */",
					"/***/ (function(module, exports, __webpack_require__) {",
					"",
					";(function (root, factory) {",
					"\tif (true) {",
					"\t\t// CommonJS",
					"\t\tmodule.exports = exports = factory(__webpack_require__(4));",
					"\t}",
					"\telse {}",
					"}(this, function (CryptoJS) {",
					"",
					"\t(function () {",
					"\t    // Shortcuts",
					"\t    var C = CryptoJS;",
					"\t    var C_lib = C.lib;",
					"\t    var WordArray = C_lib.WordArray;",
					"\t    var Hasher = C_lib.Hasher;",
					"\t    var C_algo = C.algo;",
					"",
					"\t    // Reusable object",
					"\t    var W = [];",
					"",
					"\t    /**",
					"\t     * SHA-1 hash algorithm.",
					"\t     */",
					"\t    var SHA1 = C_algo.SHA1 = Hasher.extend({",
					"\t        _doReset: function () {",
					"\t            this._hash = new WordArray.init([",
					"\t                0x67452301, 0xefcdab89,",
					"\t                0x98badcfe, 0x10325476,",
					"\t                0xc3d2e1f0",
					"\t            ]);",
					"\t        },",
					"",
					"\t        _doProcessBlock: function (M, offset) {",
					"\t            // Shortcut",
					"\t            var H = this._hash.words;",
					"",
					"\t            // Working variables",
					"\t            var a = H[0];",
					"\t            var b = H[1];",
					"\t            var c = H[2];",
					"\t            var d = H[3];",
					"\t            var e = H[4];",
					"",
					"\t            // Computation",
					"\t            for (var i = 0; i < 80; i++) {",
					"\t                if (i < 16) {",
					"\t                    W[i] = M[offset + i] | 0;",
					"\t                } else {",
					"\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];",
					"\t                    W[i] = (n << 1) | (n >>> 31);",
					"\t                }",
					"",
					"\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];",
					"\t                if (i < 20) {",
					"\t                    t += ((b & c) | (~b & d)) + 0x5a827999;",
					"\t                } else if (i < 40) {",
					"\t                    t += (b ^ c ^ d) + 0x6ed9eba1;",
					"\t                } else if (i < 60) {",
					"\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;",
					"\t                } else /* if (i < 80) */ {",
					"\t                    t += (b ^ c ^ d) - 0x359d3e2a;",
					"\t                }",
					"",
					"\t                e = d;",
					"\t                d = c;",
					"\t                c = (b << 30) | (b >>> 2);",
					"\t                b = a;",
					"\t                a = t;",
					"\t            }",
					"",
					"\t            // Intermediate hash value",
					"\t            H[0] = (H[0] + a) | 0;",
					"\t            H[1] = (H[1] + b) | 0;",
					"\t            H[2] = (H[2] + c) | 0;",
					"\t            H[3] = (H[3] + d) | 0;",
					"\t            H[4] = (H[4] + e) | 0;",
					"\t        },",
					"",
					"\t        _doFinalize: function () {",
					"\t            // Shortcuts",
					"\t            var data = this._data;",
					"\t            var dataWords = data.words;",
					"",
					"\t            var nBitsTotal = this._nDataBytes * 8;",
					"\t            var nBitsLeft = data.sigBytes * 8;",
					"",
					"\t            // Add padding",
					"\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);",
					"\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);",
					"\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;",
					"\t            data.sigBytes = dataWords.length * 4;",
					"",
					"\t            // Hash final blocks",
					"\t            this._process();",
					"",
					"\t            // Return final computed hash",
					"\t            return this._hash;",
					"\t        },",
					"",
					"\t        clone: function () {",
					"\t            var clone = Hasher.clone.call(this);",
					"\t            clone._hash = this._hash.clone();",
					"",
					"\t            return clone;",
					"\t        }",
					"\t    });",
					"",
					"\t    /**",
					"\t     * Shortcut function to the hasher's object interface.",
					"\t     *",
					"\t     * @param {WordArray|string} message The message to hash.",
					"\t     *",
					"\t     * @return {WordArray} The hash.",
					"\t     *",
					"\t     * @static",
					"\t     *",
					"\t     * @example",
					"\t     *",
					"\t     *     var hash = CryptoJS.SHA1('message');",
					"\t     *     var hash = CryptoJS.SHA1(wordArray);",
					"\t     */",
					"\t    C.SHA1 = Hasher._createHelper(SHA1);",
					"",
					"\t    /**",
					"\t     * Shortcut function to the HMAC's object interface.",
					"\t     *",
					"\t     * @param {WordArray|string} message The message to hash.",
					"\t     * @param {WordArray|string} key The secret key.",
					"\t     *",
					"\t     * @return {WordArray} The HMAC.",
					"\t     *",
					"\t     * @static",
					"\t     *",
					"\t     * @example",
					"\t     *",
					"\t     *     var hmac = CryptoJS.HmacSHA1(message, key);",
					"\t     */",
					"\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);",
					"\t}());",
					"",
					"",
					"\treturn CryptoJS.SHA1;",
					"",
					"}));",
					"",
					"/***/ }),",
					"/* 9 */",
					"/***/ (function(module, exports, __webpack_require__) {",
					"",
					";(function (root, factory) {",
					"\tif (true) {",
					"\t\t// CommonJS",
					"\t\tmodule.exports = exports = factory(__webpack_require__(4));",
					"\t}",
					"\telse {}",
					"}(this, function (CryptoJS) {",
					"",
					"\t(function () {",
					"\t    // Shortcuts",
					"\t    var C = CryptoJS;",
					"\t    var C_lib = C.lib;",
					"\t    var Base = C_lib.Base;",
					"\t    var C_enc = C.enc;",
					"\t    var Utf8 = C_enc.Utf8;",
					"\t    var C_algo = C.algo;",
					"",
					"\t    /**",
					"\t     * HMAC algorithm.",
					"\t     */",
					"\t    var HMAC = C_algo.HMAC = Base.extend({",
					"\t        /**",
					"\t         * Initializes a newly created HMAC.",
					"\t         *",
					"\t         * @param {Hasher} hasher The hash algorithm to use.",
					"\t         * @param {WordArray|string} key The secret key.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);",
					"\t         */",
					"\t        init: function (hasher, key) {",
					"\t            // Init hasher",
					"\t            hasher = this._hasher = new hasher.init();",
					"",
					"\t            // Convert string to WordArray, else assume WordArray already",
					"\t            if (typeof key == 'string') {",
					"\t                key = Utf8.parse(key);",
					"\t            }",
					"",
					"\t            // Shortcuts",
					"\t            var hasherBlockSize = hasher.blockSize;",
					"\t            var hasherBlockSizeBytes = hasherBlockSize * 4;",
					"",
					"\t            // Allow arbitrary length keys",
					"\t            if (key.sigBytes > hasherBlockSizeBytes) {",
					"\t                key = hasher.finalize(key);",
					"\t            }",
					"",
					"\t            // Clamp excess bits",
					"\t            key.clamp();",
					"",
					"\t            // Clone key for inner and outer pads",
					"\t            var oKey = this._oKey = key.clone();",
					"\t            var iKey = this._iKey = key.clone();",
					"",
					"\t            // Shortcuts",
					"\t            var oKeyWords = oKey.words;",
					"\t            var iKeyWords = iKey.words;",
					"",
					"\t            // XOR keys with pad constants",
					"\t            for (var i = 0; i < hasherBlockSize; i++) {",
					"\t                oKeyWords[i] ^= 0x5c5c5c5c;",
					"\t                iKeyWords[i] ^= 0x36363636;",
					"\t            }",
					"\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;",
					"",
					"\t            // Set initial values",
					"\t            this.reset();",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Resets this HMAC to its initial state.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     hmacHasher.reset();",
					"\t         */",
					"\t        reset: function () {",
					"\t            // Shortcut",
					"\t            var hasher = this._hasher;",
					"",
					"\t            // Reset",
					"\t            hasher.reset();",
					"\t            hasher.update(this._iKey);",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Updates this HMAC with a message.",
					"\t         *",
					"\t         * @param {WordArray|string} messageUpdate The message to append.",
					"\t         *",
					"\t         * @return {HMAC} This HMAC instance.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     hmacHasher.update('message');",
					"\t         *     hmacHasher.update(wordArray);",
					"\t         */",
					"\t        update: function (messageUpdate) {",
					"\t            this._hasher.update(messageUpdate);",
					"",
					"\t            // Chainable",
					"\t            return this;",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Finalizes the HMAC computation.",
					"\t         * Note that the finalize operation is effectively a destructive, read-once operation.",
					"\t         *",
					"\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.",
					"\t         *",
					"\t         * @return {WordArray} The HMAC.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var hmac = hmacHasher.finalize();",
					"\t         *     var hmac = hmacHasher.finalize('message');",
					"\t         *     var hmac = hmacHasher.finalize(wordArray);",
					"\t         */",
					"\t        finalize: function (messageUpdate) {",
					"\t            // Shortcut",
					"\t            var hasher = this._hasher;",
					"",
					"\t            // Compute HMAC",
					"\t            var innerHash = hasher.finalize(messageUpdate);",
					"\t            hasher.reset();",
					"\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));",
					"",
					"\t            return hmac;",
					"\t        }",
					"\t    });",
					"\t}());",
					"",
					"",
					"}));",
					"",
					"/***/ }),",
					"/* 10 */",
					"/***/ (function(module, exports, __webpack_require__) {",
					"",
					";(function (root, factory, undef) {",
					"\tif (true) {",
					"\t\t// CommonJS",
					"\t\tmodule.exports = exports = factory(__webpack_require__(4), __webpack_require__(7));",
					"\t}",
					"\telse {}",
					"}(this, function (CryptoJS) {",
					"",
					"\t/**",
					"\t * Cipher core components.",
					"\t */",
					"\tCryptoJS.lib.Cipher || (function (undefined) {",
					"\t    // Shortcuts",
					"\t    var C = CryptoJS;",
					"\t    var C_lib = C.lib;",
					"\t    var Base = C_lib.Base;",
					"\t    var WordArray = C_lib.WordArray;",
					"\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;",
					"\t    var C_enc = C.enc;",
					"\t    var Utf8 = C_enc.Utf8;",
					"\t    var Base64 = C_enc.Base64;",
					"\t    var C_algo = C.algo;",
					"\t    var EvpKDF = C_algo.EvpKDF;",
					"",
					"\t    /**",
					"\t     * Abstract base cipher template.",
					"\t     *",
					"\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)",
					"\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)",
					"\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.",
					"\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.",
					"\t     */",
					"\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({",
					"\t        /**",
					"\t         * Configuration options.",
					"\t         *",
					"\t         * @property {WordArray} iv The IV to use for this operation.",
					"\t         */",
					"\t        cfg: Base.extend(),",
					"",
					"\t        /**",
					"\t         * Creates this cipher in encryption mode.",
					"\t         *",
					"\t         * @param {WordArray} key The key.",
					"\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.",
					"\t         *",
					"\t         * @return {Cipher} A cipher instance.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });",
					"\t         */",
					"\t        createEncryptor: function (key, cfg) {",
					"\t            return this.create(this._ENC_XFORM_MODE, key, cfg);",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Creates this cipher in decryption mode.",
					"\t         *",
					"\t         * @param {WordArray} key The key.",
					"\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.",
					"\t         *",
					"\t         * @return {Cipher} A cipher instance.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });",
					"\t         */",
					"\t        createDecryptor: function (key, cfg) {",
					"\t            return this.create(this._DEC_XFORM_MODE, key, cfg);",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Initializes a newly created cipher.",
					"\t         *",
					"\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.",
					"\t         * @param {WordArray} key The key.",
					"\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });",
					"\t         */",
					"\t        init: function (xformMode, key, cfg) {",
					"\t            // Apply config defaults",
					"\t            this.cfg = this.cfg.extend(cfg);",
					"",
					"\t            // Store transform mode and key",
					"\t            this._xformMode = xformMode;",
					"\t            this._key = key;",
					"",
					"\t            // Set initial values",
					"\t            this.reset();",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Resets this cipher to its initial state.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     cipher.reset();",
					"\t         */",
					"\t        reset: function () {",
					"\t            // Reset data buffer",
					"\t            BufferedBlockAlgorithm.reset.call(this);",
					"",
					"\t            // Perform concrete-cipher logic",
					"\t            this._doReset();",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Adds data to be encrypted or decrypted.",
					"\t         *",
					"\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.",
					"\t         *",
					"\t         * @return {WordArray} The data after processing.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var encrypted = cipher.process('data');",
					"\t         *     var encrypted = cipher.process(wordArray);",
					"\t         */",
					"\t        process: function (dataUpdate) {",
					"\t            // Append",
					"\t            this._append(dataUpdate);",
					"",
					"\t            // Process available blocks",
					"\t            return this._process();",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Finalizes the encryption or decryption process.",
					"\t         * Note that the finalize operation is effectively a destructive, read-once operation.",
					"\t         *",
					"\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.",
					"\t         *",
					"\t         * @return {WordArray} The data after final processing.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var encrypted = cipher.finalize();",
					"\t         *     var encrypted = cipher.finalize('data');",
					"\t         *     var encrypted = cipher.finalize(wordArray);",
					"\t         */",
					"\t        finalize: function (dataUpdate) {",
					"\t            // Final data update",
					"\t            if (dataUpdate) {",
					"\t                this._append(dataUpdate);",
					"\t            }",
					"",
					"\t            // Perform concrete-cipher logic",
					"\t            var finalProcessedData = this._doFinalize();",
					"",
					"\t            return finalProcessedData;",
					"\t        },",
					"",
					"\t        keySize: 128/32,",
					"",
					"\t        ivSize: 128/32,",
					"",
					"\t        _ENC_XFORM_MODE: 1,",
					"",
					"\t        _DEC_XFORM_MODE: 2,",
					"",
					"\t        /**",
					"\t         * Creates shortcut functions to a cipher's object interface.",
					"\t         *",
					"\t         * @param {Cipher} cipher The cipher to create a helper for.",
					"\t         *",
					"\t         * @return {Object} An object with encrypt and decrypt shortcut functions.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);",
					"\t         */",
					"\t        _createHelper: (function () {",
					"\t            function selectCipherStrategy(key) {",
					"\t                if (typeof key == 'string') {",
					"\t                    return PasswordBasedCipher;",
					"\t                } else {",
					"\t                    return SerializableCipher;",
					"\t                }",
					"\t            }",
					"",
					"\t            return function (cipher) {",
					"\t                return {",
					"\t                    encrypt: function (message, key, cfg) {",
					"\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);",
					"\t                    },",
					"",
					"\t                    decrypt: function (ciphertext, key, cfg) {",
					"\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);",
					"\t                    }",
					"\t                };",
					"\t            };",
					"\t        }())",
					"\t    });",
					"",
					"\t    /**",
					"\t     * Abstract base stream cipher template.",
					"\t     *",
					"\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)",
					"\t     */",
					"\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({",
					"\t        _doFinalize: function () {",
					"\t            // Process partial blocks",
					"\t            var finalProcessedBlocks = this._process(!!'flush');",
					"",
					"\t            return finalProcessedBlocks;",
					"\t        },",
					"",
					"\t        blockSize: 1",
					"\t    });",
					"",
					"\t    /**",
					"\t     * Mode namespace.",
					"\t     */",
					"\t    var C_mode = C.mode = {};",
					"",
					"\t    /**",
					"\t     * Abstract base block cipher mode template.",
					"\t     */",
					"\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({",
					"\t        /**",
					"\t         * Creates this mode for encryption.",
					"\t         *",
					"\t         * @param {Cipher} cipher A block cipher instance.",
					"\t         * @param {Array} iv The IV words.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);",
					"\t         */",
					"\t        createEncryptor: function (cipher, iv) {",
					"\t            return this.Encryptor.create(cipher, iv);",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Creates this mode for decryption.",
					"\t         *",
					"\t         * @param {Cipher} cipher A block cipher instance.",
					"\t         * @param {Array} iv The IV words.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);",
					"\t         */",
					"\t        createDecryptor: function (cipher, iv) {",
					"\t            return this.Decryptor.create(cipher, iv);",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Initializes a newly created mode.",
					"\t         *",
					"\t         * @param {Cipher} cipher A block cipher instance.",
					"\t         * @param {Array} iv The IV words.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);",
					"\t         */",
					"\t        init: function (cipher, iv) {",
					"\t            this._cipher = cipher;",
					"\t            this._iv = iv;",
					"\t        }",
					"\t    });",
					"",
					"\t    /**",
					"\t     * Cipher Block Chaining mode.",
					"\t     */",
					"\t    var CBC = C_mode.CBC = (function () {",
					"\t        /**",
					"\t         * Abstract base CBC mode.",
					"\t         */",
					"\t        var CBC = BlockCipherMode.extend();",
					"",
					"\t        /**",
					"\t         * CBC encryptor.",
					"\t         */",
					"\t        CBC.Encryptor = CBC.extend({",
					"\t            /**",
					"\t             * Processes the data block at offset.",
					"\t             *",
					"\t             * @param {Array} words The data words to operate on.",
					"\t             * @param {number} offset The offset where the block starts.",
					"\t             *",
					"\t             * @example",
					"\t             *",
					"\t             *     mode.processBlock(data.words, offset);",
					"\t             */",
					"\t            processBlock: function (words, offset) {",
					"\t                // Shortcuts",
					"\t                var cipher = this._cipher;",
					"\t                var blockSize = cipher.blockSize;",
					"",
					"\t                // XOR and encrypt",
					"\t                xorBlock.call(this, words, offset, blockSize);",
					"\t                cipher.encryptBlock(words, offset);",
					"",
					"\t                // Remember this block to use with next block",
					"\t                this._prevBlock = words.slice(offset, offset + blockSize);",
					"\t            }",
					"\t        });",
					"",
					"\t        /**",
					"\t         * CBC decryptor.",
					"\t         */",
					"\t        CBC.Decryptor = CBC.extend({",
					"\t            /**",
					"\t             * Processes the data block at offset.",
					"\t             *",
					"\t             * @param {Array} words The data words to operate on.",
					"\t             * @param {number} offset The offset where the block starts.",
					"\t             *",
					"\t             * @example",
					"\t             *",
					"\t             *     mode.processBlock(data.words, offset);",
					"\t             */",
					"\t            processBlock: function (words, offset) {",
					"\t                // Shortcuts",
					"\t                var cipher = this._cipher;",
					"\t                var blockSize = cipher.blockSize;",
					"",
					"\t                // Remember this block to use with next block",
					"\t                var thisBlock = words.slice(offset, offset + blockSize);",
					"",
					"\t                // Decrypt and XOR",
					"\t                cipher.decryptBlock(words, offset);",
					"\t                xorBlock.call(this, words, offset, blockSize);",
					"",
					"\t                // This block becomes the previous block",
					"\t                this._prevBlock = thisBlock;",
					"\t            }",
					"\t        });",
					"",
					"\t        function xorBlock(words, offset, blockSize) {",
					"\t            // Shortcut",
					"\t            var iv = this._iv;",
					"",
					"\t            // Choose mixing block",
					"\t            if (iv) {",
					"\t                var block = iv;",
					"",
					"\t                // Remove IV for subsequent blocks",
					"\t                this._iv = undefined;",
					"\t            } else {",
					"\t                var block = this._prevBlock;",
					"\t            }",
					"",
					"\t            // XOR blocks",
					"\t            for (var i = 0; i < blockSize; i++) {",
					"\t                words[offset + i] ^= block[i];",
					"\t            }",
					"\t        }",
					"",
					"\t        return CBC;",
					"\t    }());",
					"",
					"\t    /**",
					"\t     * Padding namespace.",
					"\t     */",
					"\t    var C_pad = C.pad = {};",
					"",
					"\t    /**",
					"\t     * PKCS #5/7 padding strategy.",
					"\t     */",
					"\t    var Pkcs7 = C_pad.Pkcs7 = {",
					"\t        /**",
					"\t         * Pads data using the algorithm defined in PKCS #5/7.",
					"\t         *",
					"\t         * @param {WordArray} data The data to pad.",
					"\t         * @param {number} blockSize The multiple that the data should be padded to.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);",
					"\t         */",
					"\t        pad: function (data, blockSize) {",
					"\t            // Shortcut",
					"\t            var blockSizeBytes = blockSize * 4;",
					"",
					"\t            // Count padding bytes",
					"\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;",
					"",
					"\t            // Create padding word",
					"\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;",
					"",
					"\t            // Create padding",
					"\t            var paddingWords = [];",
					"\t            for (var i = 0; i < nPaddingBytes; i += 4) {",
					"\t                paddingWords.push(paddingWord);",
					"\t            }",
					"\t            var padding = WordArray.create(paddingWords, nPaddingBytes);",
					"",
					"\t            // Add padding",
					"\t            data.concat(padding);",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.",
					"\t         *",
					"\t         * @param {WordArray} data The data to unpad.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);",
					"\t         */",
					"\t        unpad: function (data) {",
					"\t            // Get number of padding bytes from last byte",
					"\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;",
					"",
					"\t            // Remove padding",
					"\t            data.sigBytes -= nPaddingBytes;",
					"\t        }",
					"\t    };",
					"",
					"\t    /**",
					"\t     * Abstract base block cipher template.",
					"\t     *",
					"\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)",
					"\t     */",
					"\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({",
					"\t        /**",
					"\t         * Configuration options.",
					"\t         *",
					"\t         * @property {Mode} mode The block mode to use. Default: CBC",
					"\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7",
					"\t         */",
					"\t        cfg: Cipher.cfg.extend({",
					"\t            mode: CBC,",
					"\t            padding: Pkcs7",
					"\t        }),",
					"",
					"\t        reset: function () {",
					"\t            // Reset cipher",
					"\t            Cipher.reset.call(this);",
					"",
					"\t            // Shortcuts",
					"\t            var cfg = this.cfg;",
					"\t            var iv = cfg.iv;",
					"\t            var mode = cfg.mode;",
					"",
					"\t            // Reset block mode",
					"\t            if (this._xformMode == this._ENC_XFORM_MODE) {",
					"\t                var modeCreator = mode.createEncryptor;",
					"\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {",
					"\t                var modeCreator = mode.createDecryptor;",
					"\t                // Keep at least one block in the buffer for unpadding",
					"\t                this._minBufferSize = 1;",
					"\t            }",
					"",
					"\t            if (this._mode && this._mode.__creator == modeCreator) {",
					"\t                this._mode.init(this, iv && iv.words);",
					"\t            } else {",
					"\t                this._mode = modeCreator.call(mode, this, iv && iv.words);",
					"\t                this._mode.__creator = modeCreator;",
					"\t            }",
					"\t        },",
					"",
					"\t        _doProcessBlock: function (words, offset) {",
					"\t            this._mode.processBlock(words, offset);",
					"\t        },",
					"",
					"\t        _doFinalize: function () {",
					"\t            // Shortcut",
					"\t            var padding = this.cfg.padding;",
					"",
					"\t            // Finalize",
					"\t            if (this._xformMode == this._ENC_XFORM_MODE) {",
					"\t                // Pad data",
					"\t                padding.pad(this._data, this.blockSize);",
					"",
					"\t                // Process final blocks",
					"\t                var finalProcessedBlocks = this._process(!!'flush');",
					"\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {",
					"\t                // Process final blocks",
					"\t                var finalProcessedBlocks = this._process(!!'flush');",
					"",
					"\t                // Unpad data",
					"\t                padding.unpad(finalProcessedBlocks);",
					"\t            }",
					"",
					"\t            return finalProcessedBlocks;",
					"\t        },",
					"",
					"\t        blockSize: 128/32",
					"\t    });",
					"",
					"\t    /**",
					"\t     * A collection of cipher parameters.",
					"\t     *",
					"\t     * @property {WordArray} ciphertext The raw ciphertext.",
					"\t     * @property {WordArray} key The key to this ciphertext.",
					"\t     * @property {WordArray} iv The IV used in the ciphering operation.",
					"\t     * @property {WordArray} salt The salt used with a key derivation function.",
					"\t     * @property {Cipher} algorithm The cipher algorithm.",
					"\t     * @property {Mode} mode The block mode used in the ciphering operation.",
					"\t     * @property {Padding} padding The padding scheme used in the ciphering operation.",
					"\t     * @property {number} blockSize The block size of the cipher.",
					"\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.",
					"\t     */",
					"\t    var CipherParams = C_lib.CipherParams = Base.extend({",
					"\t        /**",
					"\t         * Initializes a newly created cipher params object.",
					"\t         *",
					"\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({",
					"\t         *         ciphertext: ciphertextWordArray,",
					"\t         *         key: keyWordArray,",
					"\t         *         iv: ivWordArray,",
					"\t         *         salt: saltWordArray,",
					"\t         *         algorithm: CryptoJS.algo.AES,",
					"\t         *         mode: CryptoJS.mode.CBC,",
					"\t         *         padding: CryptoJS.pad.PKCS7,",
					"\t         *         blockSize: 4,",
					"\t         *         formatter: CryptoJS.format.OpenSSL",
					"\t         *     });",
					"\t         */",
					"\t        init: function (cipherParams) {",
					"\t            this.mixIn(cipherParams);",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Converts this cipher params object to a string.",
					"\t         *",
					"\t         * @param {Format} formatter (Optional) The formatting strategy to use.",
					"\t         *",
					"\t         * @return {string} The stringified cipher params.",
					"\t         *",
					"\t         * @throws Error If neither the formatter nor the default formatter is set.",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var string = cipherParams + '';",
					"\t         *     var string = cipherParams.toString();",
					"\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);",
					"\t         */",
					"\t        toString: function (formatter) {",
					"\t            return (formatter || this.formatter).stringify(this);",
					"\t        }",
					"\t    });",
					"",
					"\t    /**",
					"\t     * Format namespace.",
					"\t     */",
					"\t    var C_format = C.format = {};",
					"",
					"\t    /**",
					"\t     * OpenSSL formatting strategy.",
					"\t     */",
					"\t    var OpenSSLFormatter = C_format.OpenSSL = {",
					"\t        /**",
					"\t         * Converts a cipher params object to an OpenSSL-compatible string.",
					"\t         *",
					"\t         * @param {CipherParams} cipherParams The cipher params object.",
					"\t         *",
					"\t         * @return {string} The OpenSSL-compatible string.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);",
					"\t         */",
					"\t        stringify: function (cipherParams) {",
					"\t            // Shortcuts",
					"\t            var ciphertext = cipherParams.ciphertext;",
					"\t            var salt = cipherParams.salt;",
					"",
					"\t            // Format",
					"\t            if (salt) {",
					"\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);",
					"\t            } else {",
					"\t                var wordArray = ciphertext;",
					"\t            }",
					"",
					"\t            return wordArray.toString(Base64);",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Converts an OpenSSL-compatible string to a cipher params object.",
					"\t         *",
					"\t         * @param {string} openSSLStr The OpenSSL-compatible string.",
					"\t         *",
					"\t         * @return {CipherParams} The cipher params object.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);",
					"\t         */",
					"\t        parse: function (openSSLStr) {",
					"\t            // Parse base64",
					"\t            var ciphertext = Base64.parse(openSSLStr);",
					"",
					"\t            // Shortcut",
					"\t            var ciphertextWords = ciphertext.words;",
					"",
					"\t            // Test for salt",
					"\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {",
					"\t                // Extract salt",
					"\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));",
					"",
					"\t                // Remove salt from ciphertext",
					"\t                ciphertextWords.splice(0, 4);",
					"\t                ciphertext.sigBytes -= 16;",
					"\t            }",
					"",
					"\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });",
					"\t        }",
					"\t    };",
					"",
					"\t    /**",
					"\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.",
					"\t     */",
					"\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({",
					"\t        /**",
					"\t         * Configuration options.",
					"\t         *",
					"\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL",
					"\t         */",
					"\t        cfg: Base.extend({",
					"\t            format: OpenSSLFormatter",
					"\t        }),",
					"",
					"\t        /**",
					"\t         * Encrypts a message.",
					"\t         *",
					"\t         * @param {Cipher} cipher The cipher algorithm to use.",
					"\t         * @param {WordArray|string} message The message to encrypt.",
					"\t         * @param {WordArray} key The key.",
					"\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.",
					"\t         *",
					"\t         * @return {CipherParams} A cipher params object.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);",
					"\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });",
					"\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });",
					"\t         */",
					"\t        encrypt: function (cipher, message, key, cfg) {",
					"\t            // Apply config defaults",
					"\t            cfg = this.cfg.extend(cfg);",
					"",
					"\t            // Encrypt",
					"\t            var encryptor = cipher.createEncryptor(key, cfg);",
					"\t            var ciphertext = encryptor.finalize(message);",
					"",
					"\t            // Shortcut",
					"\t            var cipherCfg = encryptor.cfg;",
					"",
					"\t            // Create and return serializable cipher params",
					"\t            return CipherParams.create({",
					"\t                ciphertext: ciphertext,",
					"\t                key: key,",
					"\t                iv: cipherCfg.iv,",
					"\t                algorithm: cipher,",
					"\t                mode: cipherCfg.mode,",
					"\t                padding: cipherCfg.padding,",
					"\t                blockSize: cipher.blockSize,",
					"\t                formatter: cfg.format",
					"\t            });",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Decrypts serialized ciphertext.",
					"\t         *",
					"\t         * @param {Cipher} cipher The cipher algorithm to use.",
					"\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.",
					"\t         * @param {WordArray} key The key.",
					"\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.",
					"\t         *",
					"\t         * @return {WordArray} The plaintext.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });",
					"\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });",
					"\t         */",
					"\t        decrypt: function (cipher, ciphertext, key, cfg) {",
					"\t            // Apply config defaults",
					"\t            cfg = this.cfg.extend(cfg);",
					"",
					"\t            // Convert string to CipherParams",
					"\t            ciphertext = this._parse(ciphertext, cfg.format);",
					"",
					"\t            // Decrypt",
					"\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);",
					"",
					"\t            return plaintext;",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Converts serialized ciphertext to CipherParams,",
					"\t         * else assumed CipherParams already and returns ciphertext unchanged.",
					"\t         *",
					"\t         * @param {CipherParams|string} ciphertext The ciphertext.",
					"\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.",
					"\t         *",
					"\t         * @return {CipherParams} The unserialized ciphertext.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);",
					"\t         */",
					"\t        _parse: function (ciphertext, format) {",
					"\t            if (typeof ciphertext == 'string') {",
					"\t                return format.parse(ciphertext, this);",
					"\t            } else {",
					"\t                return ciphertext;",
					"\t            }",
					"\t        }",
					"\t    });",
					"",
					"\t    /**",
					"\t     * Key derivation function namespace.",
					"\t     */",
					"\t    var C_kdf = C.kdf = {};",
					"",
					"\t    /**",
					"\t     * OpenSSL key derivation function.",
					"\t     */",
					"\t    var OpenSSLKdf = C_kdf.OpenSSL = {",
					"\t        /**",
					"\t         * Derives a key and IV from a password.",
					"\t         *",
					"\t         * @param {string} password The password to derive from.",
					"\t         * @param {number} keySize The size in words of the key to generate.",
					"\t         * @param {number} ivSize The size in words of the IV to generate.",
					"\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.",
					"\t         *",
					"\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);",
					"\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');",
					"\t         */",
					"\t        execute: function (password, keySize, ivSize, salt) {",
					"\t            // Generate random salt",
					"\t            if (!salt) {",
					"\t                salt = WordArray.random(64/8);",
					"\t            }",
					"",
					"\t            // Derive key and IV",
					"\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);",
					"",
					"\t            // Separate key and IV",
					"\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);",
					"\t            key.sigBytes = keySize * 4;",
					"",
					"\t            // Return params",
					"\t            return CipherParams.create({ key: key, iv: iv, salt: salt });",
					"\t        }",
					"\t    };",
					"",
					"\t    /**",
					"\t     * A serializable cipher wrapper that derives the key from a password,",
					"\t     * and returns ciphertext as a serializable cipher params object.",
					"\t     */",
					"\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({",
					"\t        /**",
					"\t         * Configuration options.",
					"\t         *",
					"\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL",
					"\t         */",
					"\t        cfg: SerializableCipher.cfg.extend({",
					"\t            kdf: OpenSSLKdf",
					"\t        }),",
					"",
					"\t        /**",
					"\t         * Encrypts a message using a password.",
					"\t         *",
					"\t         * @param {Cipher} cipher The cipher algorithm to use.",
					"\t         * @param {WordArray|string} message The message to encrypt.",
					"\t         * @param {string} password The password.",
					"\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.",
					"\t         *",
					"\t         * @return {CipherParams} A cipher params object.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');",
					"\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });",
					"\t         */",
					"\t        encrypt: function (cipher, message, password, cfg) {",
					"\t            // Apply config defaults",
					"\t            cfg = this.cfg.extend(cfg);",
					"",
					"\t            // Derive key and other params",
					"\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);",
					"",
					"\t            // Add IV to config",
					"\t            cfg.iv = derivedParams.iv;",
					"",
					"\t            // Encrypt",
					"\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);",
					"",
					"\t            // Mix in derived params",
					"\t            ciphertext.mixIn(derivedParams);",
					"",
					"\t            return ciphertext;",
					"\t        },",
					"",
					"\t        /**",
					"\t         * Decrypts serialized ciphertext using a password.",
					"\t         *",
					"\t         * @param {Cipher} cipher The cipher algorithm to use.",
					"\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.",
					"\t         * @param {string} password The password.",
					"\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.",
					"\t         *",
					"\t         * @return {WordArray} The plaintext.",
					"\t         *",
					"\t         * @static",
					"\t         *",
					"\t         * @example",
					"\t         *",
					"\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });",
					"\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });",
					"\t         */",
					"\t        decrypt: function (cipher, ciphertext, password, cfg) {",
					"\t            // Apply config defaults",
					"\t            cfg = this.cfg.extend(cfg);",
					"",
					"\t            // Convert string to CipherParams",
					"\t            ciphertext = this._parse(ciphertext, cfg.format);",
					"",
					"\t            // Derive key and other params",
					"\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);",
					"",
					"\t            // Add IV to config",
					"\t            cfg.iv = derivedParams.iv;",
					"",
					"\t            // Decrypt",
					"\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);",
					"",
					"\t            return plaintext;",
					"\t        }",
					"\t    });",
					"\t}());",
					"",
					"",
					"}));",
					"",
					"/***/ }),",
					"/* 11 */",
					"/***/ (function(module, exports, __webpack_require__) {",
					"",
					";(function (root, factory) {",
					"\tif (true) {",
					"\t\t// CommonJS",
					"\t\tmodule.exports = exports = factory(__webpack_require__(4));",
					"\t}",
					"\telse {}",
					"}(this, function (CryptoJS) {",
					"",
					"\treturn CryptoJS.enc.Hex;",
					"",
					"}));",
					"",
					"/***/ }),",
					"/* 12 */",
					"/***/ (function(module, exports, __webpack_require__) {",
					"",
					"\"use strict\";",
					"",
					"",
					"var base64_url_decode = __webpack_require__(13);",
					"",
					"function InvalidTokenError(message) {",
					"  this.message = message;",
					"}",
					"",
					"InvalidTokenError.prototype = new Error();",
					"InvalidTokenError.prototype.name = 'InvalidTokenError';",
					"",
					"module.exports = function (token,options) {",
					"  if (typeof token !== 'string') {",
					"    throw new InvalidTokenError('Invalid token specified');",
					"  }",
					"",
					"  options = options || {};",
					"  var pos = options.header === true ? 0 : 1;",
					"  try {",
					"    return JSON.parse(base64_url_decode(token.split('.')[pos]));",
					"  } catch (e) {",
					"    throw new InvalidTokenError('Invalid token specified: ' + e.message);",
					"  }",
					"};",
					"",
					"module.exports.InvalidTokenError = InvalidTokenError;",
					"",
					"",
					"/***/ }),",
					"/* 13 */",
					"/***/ (function(module, exports, __webpack_require__) {",
					"",
					"var atob = __webpack_require__(14);",
					"",
					"function b64DecodeUnicode(str) {",
					"  return decodeURIComponent(atob(str).replace(/(.)/g, function (m, p) {",
					"    var code = p.charCodeAt(0).toString(16).toUpperCase();",
					"    if (code.length < 2) {",
					"      code = '0' + code;",
					"    }",
					"    return '%' + code;",
					"  }));",
					"}",
					"",
					"module.exports = function(str) {",
					"  var output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");",
					"  switch (output.length % 4) {",
					"    case 0:",
					"      break;",
					"    case 2:",
					"      output += \"==\";",
					"      break;",
					"    case 3:",
					"      output += \"=\";",
					"      break;",
					"    default:",
					"      throw \"Illegal base64url string!\";",
					"  }",
					"",
					"  try{",
					"    return b64DecodeUnicode(output);",
					"  } catch (err) {",
					"    return atob(output);",
					"  }",
					"};",
					"",
					"",
					"/***/ }),",
					"/* 14 */",
					"/***/ (function(module, exports) {",
					"",
					"/**",
					" * The code was extracted from:",
					" * https://github.com/davidchambers/Base64.js",
					" */",
					"",
					"var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';",
					"",
					"function InvalidCharacterError(message) {",
					"  this.message = message;",
					"}",
					"",
					"InvalidCharacterError.prototype = new Error();",
					"InvalidCharacterError.prototype.name = 'InvalidCharacterError';",
					"",
					"function polyfill (input) {",
					"  var str = String(input).replace(/=+$/, '');",
					"  if (str.length % 4 == 1) {",
					"    throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");",
					"  }",
					"  for (",
					"    // initialize result and counters",
					"    var bc = 0, bs, buffer, idx = 0, output = '';",
					"    // get next character",
					"    buffer = str.charAt(idx++);",
					"    // character found in table? initialize bit storage and add its ascii value;",
					"    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,",
					"      // and if not first of each 4 characters,",
					"      // convert the first 8 bits to one ascii character",
					"      bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0",
					"  ) {",
					"    // try to find character in table (0-63, not found => -1)",
					"    buffer = chars.indexOf(buffer);",
					"  }",
					"  return output;",
					"}",
					"",
					"",
					"module.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;",
					"",
					"/***/ })",
					"/******/ ]);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}